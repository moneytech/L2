(ignore
  Make a unary function with the given name that calls an undefined function of the same
  name with the same arguments that it received. The idea is that the intrinsic generators
  will replace the function call with inline assembly.)

(constrain make-unary-intrinsic (\ r (with-vars (a) (`(function (string buffer ,a) expr)r)r)))

(function make-unary-intrinsic (name buf handler)
  (substitute (.. buf handler)
    (let (func-symbol [make-symbol name null-fragment null-expr ..])
        (callee-symbol [make-symbol null-string null-fragment null-expr ..])
        (param-a [make-symbol null-string null-fragment null-expr ..])
        (arg-a [make-symbol null-string null-fragment null-expr ..])
      (let (func (make-functionN func-symbol (param-a)
          (make-invokeN callee-symbol (arg-a) null-fragment null-expr ..) null-fragment null-expr ..)) (do
        (setf expr-binding-aug callee-symbol [make-undefined-binding (@ expr-name func-symbol) ..])
        [bind-symbol arg-a param-a]
        func)))))

(ignore Performs actions analogous to make-unary-intrinsic, but for binary functions.)

(constrain make-binary-intrinsic (\ r (with-vars (a) (`(function (string buffer ,a) expr)r)r)))

(function make-binary-intrinsic (name buf handler)
  (substitute (.. buf handler)
    (let (func-symbol [make-symbol name null-fragment null-expr ..])
        (callee-symbol [make-symbol null-string null-fragment null-expr ..])
        (param-a [make-symbol null-string null-fragment null-expr ..])
        (param-b [make-symbol null-string null-fragment null-expr ..])
        (arg-a [make-symbol null-string null-fragment null-expr ..])
        (arg-b [make-symbol null-string null-fragment null-expr ..])
      (let (func (make-functionN func-symbol (param-a param-b)
          (make-invokeN callee-symbol (arg-a arg-b) null-fragment null-expr ..) null-fragment null-expr ..)) (do
        (setf expr-binding-aug callee-symbol [make-undefined-binding (@ expr-name func-symbol) ..])
        [bind-symbol arg-a param-a]
        [bind-symbol arg-b param-b]
        func)))))

(ignore
  The following function wraps the arithmetic intrinsics so that the addresses of
  functions like + and - can be taken like non-intrinsic functions.)

(constrain wrap-arithmetic-intrinsics (\ r (with-vars (a) (`(function (buffer ,a) (list expr))r)r)))

(function wrap-arithmetic-intrinsics (buf handler)
  (substitute (.. buf handler) (list
    ([make-unary-intrinsic [rstrcpy (" getb) ..] ..]
    [make-unary-intrinsic [rstrcpy (" get1b) ..] ..]
    [make-unary-intrinsic [rstrcpy (" get2b) ..] ..]
    [make-unary-intrinsic [rstrcpy (" get4b) ..] ..]
    [make-unary-intrinsic [rstrcpy (" get8b) ..] ..]
    [make-unary-intrinsic [rstrcpy (" get) ..] ..]
    [make-binary-intrinsic [rstrcpy (" setb) ..] ..]
    [make-binary-intrinsic [rstrcpy (" set1b) ..] ..]
    [make-binary-intrinsic [rstrcpy (" set2b) ..] ..]
    [make-binary-intrinsic [rstrcpy (" set4b) ..] ..]
    [make-binary-intrinsic [rstrcpy (" set8b) ..] ..]
    [make-binary-intrinsic [rstrcpy (" set) ..] ..]
    [make-binary-intrinsic [rstrcpy (" +) ..] ..]
    [make-binary-intrinsic [rstrcpy (" -) ..] ..]
    [make-binary-intrinsic [rstrcpy (" *) ..] ..]
    [make-binary-intrinsic [rstrcpy (" /) ..] ..]
    [make-binary-intrinsic [rstrcpy (" rem) ..] ..]
    [make-binary-intrinsic [rstrcpy (" =) ..] ..]
    [make-binary-intrinsic [rstrcpy (" <) ..] ..]
    [make-binary-intrinsic [rstrcpy (" >) ..] ..]
    [make-binary-intrinsic [rstrcpy (" <<) ..] ..]
    [make-binary-intrinsic [rstrcpy (" >>) ..] ..]
    [make-binary-intrinsic [rstrcpy (" lor) ..] ..]
    [make-binary-intrinsic [rstrcpy (" land) ..] ..]
    [make-unary-intrinsic [rstrcpy (" lnot) ..] ..]) ..)))

(ignore
  The following function generates inline assembly for the following functions: getb,
  get1b, get2b, get4b, get8b, get, setb, set1b, set2b, set4b, set8b, set, +, -, *, /, rem,
  =, <, >, <<, >>, lor, land, lnot. This function only applies to invocations of functions
  with the aforementioned names that are undefined in the invocation's lexical
  environment.)

(constrain generate-arithmetic-intrinsics
  (\ r (with-vars (a) (`(function (expr (list generator) (ref (list expr)) (continuation (())) buffer ,a) ())r)r)))

(function generate-arithmetic-intrinsics (n gens c success r handler)
  (substitute (.. r handler)
    (if (and [= (@ expr-type n) (-invoke-)] [= (@ expr-type (@ expr-reference n)) (-symbol-)]
        [= (@ bndg-state (@ expr-binding-aug (@ expr-reference n))) (undefined-state)])
      (switch str= (@ bndg-name (@ expr-binding-aug (@ expr-reference n)))
        ((" getb) (" get1b) {success (do
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [prepend (make-asmN (movq-reg-to-reg) ((make-asmN(rax)()..) (make-asmN(r10)()..)) ..) c ..]
          [prepend (make-asmN (xorq-reg-to-reg) ((make-asmN(rax)()..) (make-asmN(rax)()..)) ..) c ..]
          [prepend (make-asmN(movb-mdb-to-reg)
            ([make-literal #0 null-fragment null-expr ..] (make-asmN(r10)()..) (make-asmN(al)()..))..) c ..])})
        
        ((" get2b) {success (do
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [prepend (make-asmN (movq-reg-to-reg) ((make-asmN(rax)()..) (make-asmN(r10)()..)) ..) c ..]
          [prepend (make-asmN (xorq-reg-to-reg) ((make-asmN(rax)()..) (make-asmN(rax)()..)) ..) c ..]
          [prepend (make-asmN(movw-mdb-to-reg)
            ([make-literal #0 null-fragment null-expr ..] (make-asmN(r10)()..) (make-asmN(ax)()..))..) c ..])})
        
        ((" get4b) {success (do
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [prepend (make-asmN (movq-reg-to-reg) ((make-asmN(rax)()..) (make-asmN(r10)()..)) ..) c ..]
          [prepend (make-asmN (xorq-reg-to-reg) ((make-asmN(rax)()..) (make-asmN(rax)()..)) ..) c ..]
          [prepend (make-asmN(movl-mdb-to-reg)
            ([make-literal #0 null-fragment null-expr ..] (make-asmN(r10)()..) (make-asmN(eax)()..))..) c ..])})
        
        ((" get8b) (" get) {success (do
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [prepend (make-asmN(movq-mdb-to-reg)
            ([make-literal #0 null-fragment null-expr ..] (make-asmN(rax)()..) (make-asmN(rax)()..))..) c ..])})
        
        ((" setb) (" set1b) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (movb-reg-to-mdb)
            ((make-asmN(al)()..) [make-literal #0 null-fragment null-expr ..] (make-asmN(r11)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
        
        ((" set2b) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (movw-reg-to-mdb)
            ((make-asmN(ax)()..) [make-literal #0 null-fragment null-expr ..] (make-asmN(r11)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
        
        ((" set4b) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (movl-reg-to-mdb)
            ((make-asmN(eax)()..) [make-literal #0 null-fragment null-expr ..] (make-asmN(r11)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
        
        ((" set8b) (" set) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (movq-reg-to-mdb)
            ((make-asmN(rax)()..) [make-literal #0 null-fragment null-expr ..] (make-asmN(r11)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
        
        ((" +) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (addq-reg-to-reg) ((make-asmN(r11)()..) (make-asmN(rax)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
          
        ((" -) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (subq-reg-to-reg) ((make-asmN(r11)()..) (make-asmN(rax)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
          
        ((" *) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (mulq-reg) ((make-asmN(r11)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
        
        ((" /) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [prepend (make-asmN (xorq-reg-to-reg) ((make-asmN(rdx)()..) (make-asmN(rdx)()..)) ..) c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (divq-reg) ((make-asmN(r11)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
        
        ((" rem) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [prepend (make-asmN (xorq-reg-to-reg) ((make-asmN(rdx)()..) (make-asmN(rdx)()..)) ..) c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (divq-reg) ((make-asmN(r11)()..)) ..) c ..]
          [prepend (make-asmN (movq-reg-to-reg) ((make-asmN(rdx)()..) (make-asmN(rax)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
        
        ((" =) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [prepend (make-asmN (movq-reg-to-reg) ((make-asmN(rax)()..) (make-asmN(rsi)()..)) ..) c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (xorq-reg-to-reg) ((make-asmN(rax)()..) (make-asmN(rax)()..)) ..) c ..]
          [prepend (make-asmN (subq-reg-to-reg) ((make-asmN(r11)()..) (make-asmN(rsi)()..)) ..) c ..]
          [prepend (make-asmN (setz-reg) ((make-asmN(al)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
        
        ((" <) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [prepend (make-asmN (movq-reg-to-reg) ((make-asmN(rax)()..) (make-asmN(rsi)()..)) ..) c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (xorq-reg-to-reg) ((make-asmN(rax)()..) (make-asmN(rax)()..)) ..) c ..]
          [prepend (make-asmN (subq-reg-to-reg) ((make-asmN(r11)()..) (make-asmN(rsi)()..)) ..) c ..]
          [prepend (make-asmN (setc-reg) ((make-asmN(al)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
        
        ((" >) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [prepend (make-asmN (movq-reg-to-reg) ((make-asmN(rax)()..) (make-asmN(rsi)()..)) ..) c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (xorq-reg-to-reg) ((make-asmN(rax)()..) (make-asmN(rax)()..)) ..) c ..]
          [prepend (make-asmN (subq-reg-to-reg) ((make-asmN(rsi)()..) (make-asmN(r11)()..)) ..) c ..]
          [prepend (make-asmN (setc-reg) ((make-asmN(al)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
        
        ((" <<) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(rcx)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (shlq-cl-to-reg) ((make-asmN(rax)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
        
        ((" >>) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(rcx)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (shrq-cl-to-reg) ((make-asmN(rax)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
        
        ((" lor) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (orq-reg-to-reg) ((make-asmN(r11)()..) (make-asmN(rax)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
        
        ((" land) {success (do
          [cond-push-relative-storage n c ..]
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) #0 (make-asmN(r10)()..) c ..]
          [generate-expression [@cadr (@ expr-arguments n)] gens c ..]
          [generate-load (@ expr-temp-storage-bndg n) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) c ..]
          [prepend (make-asmN (andq-reg-to-reg) ((make-asmN(r11)()..) (make-asmN(rax)()..)) ..) c ..]
          [cond-pop-relative-storage n c ..])})
        
        ((" lnot) {success (do
          [generate-expression [@car (@ expr-arguments n)] gens c ..]
          [prepend (make-asmN (notq-reg) ((make-asmN(rax)()..)) ..) c ..])})
        
        (ignore))
      (ignore))))

