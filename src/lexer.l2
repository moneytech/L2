(constrain frag->list (\(r) (`(function (frag) (list frag))r)))

(function frag->list (x) [cast x])

(constrain list->fragment (\(r) (`(function ((list frag)) frag)r)))

(function list->fragment (x) [cast x])

(constrain token->fragment (\(r) (`(function ((list tchar)) frag)r)))

(function token->fragment (x) [cast x])

(constrain fragment->token (\(r) (`(function (frag) (list tchar))r)))

(function fragment->token (x) [cast x])

(constrain frag->vbl (\(r) (`(function (frag) vbl)r)))

(function frag->vbl (x) [cast x])

(constrain vbl->frag (\(r) (`(function (vbl) frag)r)))

(function vbl->frag (x) [cast x])

(constrain vbl (\(r) (with-vars (a) (`(function (buffer ,a) vbl)r)r)))

(function vbl (r handler) (with return
  (let (l [buffer-alloc (list-struct) r handler]) (begin
    (setf car l [cast l])
    (setf cdr l l)
    {return [frag->vbl [list->fragment l]]}))))

(constrain vbl? (\(r) (with-vars (a) (`(function (frag) ,a)r)r)))

(function vbl? (s) (let (t [frag->list s]) (and (not [= t nil]) [= (@ cdr t) t])))

(constrain vbl= (\(r) (with-vars (a) (`(function (vbl vbl) ,a)r)r)))

(function vbl= (a b) [= a b])

(constrain set-val (\(r) (`(function (vbl frag) ())r)))

(function set-val (vbl val) (let (t [frag->list [vbl->frag vbl]]) (setf car t val)))

(constrain get-val (\(r) (`(function (vbl) frag)r)))

(function get-val (vbl) (let (t [frag->list [vbl->frag vbl]]) (@ car t)))

(constrain evaluate (\(r) (`(function (frag) frag)r)))

(function evaluate (val)
  (loop next (val val)
    (if [vbl? val]
      (let (next-val [get-val [frag->vbl val]])
        (if [= val next-val]
          next-val
          {next next-val}))
      val)))

(constrain recursive-evaluate (\(r) (with-vars (a) (`(function (frag buffer ,a) frag)r)r)))

(function recursive-evaluate (frag r handler)
  (substitute (.. r handler)
    (let (d [evaluate frag])
      (if (or [vbl? d] [i/f:token? d])
        d
        [list->fragment [reverse
          (reverse-map (x [frag->list d]) [recursive-evaluate x ..] ..) ..]]))))

(;; What follows is a struct for representing fragment characters. It is
  conceptually in union with the list-struct.)

(function character-struct (l r) [mk# r #16])

(;; This field should be set to character-flag to indicate that a given reference
  is a character rather than a list.)
  
(function cs-flag (l r) [property #8 8b (\(r) [var r]) (\(s r) [var r]) l r])

(;; This field contains the ASCII character represented by the this fragment
  character.)
  
(function cs-character (l r) [property #0 8b (\(r) [var r]) (\(s r) [var r]) l r])

(;; Returns a reference to a fragment character representing the supplied
  ASCII character.)

(function char-init (s r) (`(storage _ (char (,[@fst s])) character-flag)r))

(;; Returns the fragment character representing the supplied ASCII
  character.)

(function tkn-char (s r) (`(constrain ($(loc (unit) (,[@fst s]) characters)) (\(r) (` tchar r)))r))

(storage null-fragment (begin))

(;; Checks if two fragment characters are equal. a is a fragment character. b
  is a fragment character. Return value is (true) if they are equal and (false)
  otherwise.)

(function i/f:char= (a b) [= (@ cs-character a) (@ cs-character b)])

(;; Following array is used to lookup fragment character corresponding to ASCII character.)

(storage characters
  #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 #0 (char-init !) (char-init ")
  (char-init #) (char-init $) (char-init %) (char-init &) (char-init ') #0 #0 (char-init *) (char-init +) (char-init ,)
  (char-init -) (char-init .) (char-init /) (char-init 0) (char-init 1) (char-init 2) (char-init 3) (char-init 4) (char-init 5)
  (char-init 6) (char-init 7) (char-init 8) (char-init 9) (char-init :) (char-init ;) (char-init <) (char-init =) (char-init >)
  (char-init ?) (char-init @) (char-init A) (char-init B) (char-init C) (char-init D) (char-init E) (char-init F) (char-init G)
  (char-init H) (char-init I) (char-init J) (char-init K) (char-init L) (char-init M) (char-init N) (char-init O) (char-init P)
  (char-init Q) (char-init R) (char-init S) (char-init T) (char-init U) (char-init V) (char-init W) (char-init X) (char-init Y)
  (char-init Z) #0 (char-init \) #0 (char-init ^) (char-init _) (char-init `) (char-init a) (char-init b) (char-init c)
  (char-init d) (char-init e) (char-init f) (char-init g) (char-init h) (char-init i) (char-init j) (char-init k) (char-init l)
  (char-init m) (char-init n) (char-init o) (char-init p) (char-init q) (char-init r) (char-init s) (char-init t) (char-init u)
  (char-init v) (char-init w) (char-init x) (char-init y) (char-init z) #0 (char-init |) #0 (char-init ~) #0)

(;; Builds a token from a given C-string. str is the C-string that the constructed
  token will be based on. r is the buffer in which the token will be constructed.
  Return value is the constructed token.)

(constrain build-token (\(r) (with-vars (c) (`(function (string buffer ,c) (list tchar))r)r)))

(function build-token (str r handler)
  (loop cons-char (sexprs nil) (strptr str)
    (if [getb strptr]
      {cons-char [cons (tkn-char [getb strptr]) sexprs r handler] [+ strptr #1]}
      [reverse sexprs r handler])))

(;; Moves the supplied index forward to the first non-space character. l2src is a
  reference to the beginning of a buffer containing characters. l2src-sz contains
  the size in bytes of the buffer. pos is the reference to an index integer that
  will be increased. Return value is the number of remaining characters in the
  buffer.)

(function after-leading-space (l2src l2src-sz pos)
  (loop find-space
    (if (and [< $pos l2src-sz] [isspace [getb[+ l2src $pos]]])
      (begin [set+ pos #1] {find-space})
      [- l2src-sz $pos])))

(;; If there is a space at the current position in the buffer, then build a token
  containing solely the sigil. Otherwise build a token of the form (<sigil>
  <token>) where token is the token starting at the current position in the
  buffer. sigil is a string. l2src is a reference to the start of a buffer
  containing characters. l2src-sz is the size of the buffer. pos is a reference
  to the current index in the buffer. r is the buffer into which the token
  should be put. Return value is the constructed token.)

(constrain build-sigilled-token (\(r) (with-vars (a b c d e f) (`(function (,a ,b ,c ,d ,e ,f) frag)r)r)))

(function build-sigilled-token (sigil l2src l2src-sz pos r handler) (with return
  (substitute (.. r handler) (begin
    (if [= l2src-sz $pos] {return [token->fragment [build-token sigil ..]]} (begin))
    (let (d [getb [+ l2src $pos]])
      {return (if (or [isspace d] [= d (rparen)] [= d (rbrace)] [= d (rbracket)] [= d (lparen)] [= d (lbrace)] [= d (lbracket)])
        [token->fragment [build-token sigil ..]]
        [list->fragment (list ([token->fragment [build-token sigil ..]] [build-fragment l2src l2src-sz pos ..]) ..)])})))))

(;; Builds a fragment list starting at the current position in the buffer and ending
  at the specified delimiter and then prefixes it with the given primitive.
  primitive is a string. delimiter is an ascii character. For rest of parameters,
  see above.)

(constrain build-fragment-list (\(r) (with-vars (a b c d e) (`(function (string ,a ,b ,c ,d buffer ,e) (list frag))r)r)))

(function build-fragment-list (primitive delimeter l2src l2src-sz pos r handler) (with return
  (substitute (.. r handler)
    (loop cons-frag (sexprs (list ([token->fragment [build-token primitive ..]]) ..))
      (let (rem [after-leading-space l2src l2src-sz pos])
        (if (and rem [= [getb [+ l2src $pos]] delimeter])
          (begin [set+ pos #1] {return [reverse sexprs ..]})
          {cons-frag [cons [build-fragment l2src l2src-sz pos ..] sexprs ..]}))))))

(storage unexpected-char-error (begin))

(;; Builds a fragment starting at the current position in the buffer. For parameters,
  see above.)

(constrain build-fragment (\(r) (with-vars (a b c d e) (`(function (,a ,b ,c ,d ,e) frag)r)r)))

(function build-fragment (l2src l2src-sz pos r handler) (with return
  (substitute (.. r handler) (if [= l2src-sz $pos]
    {handler (storage _ unexpected-char-error #0 $pos)}
    (let (c [getb [+ l2src $pos]])
      (if (or [isspace c] [= c (rparen)] [= c (rbrace)] [= c (rbracket)])
        {handler (storage _ unexpected-char-error c $pos)}
        (begin
          [set+ pos #1]
          {return (switch = c
            ((lparen) [list->fragment [@cdr [build-fragment-list (" expression) (rparen) l2src l2src-sz pos ..]]])
            ((lbrace) [list->fragment [build-fragment-list (" jump) (rbrace) l2src l2src-sz pos ..]])
            ((lbracket) [list->fragment [build-fragment-list (" invoke) (rbracket) l2src l2src-sz pos ..]])
            ((char $) [build-sigilled-token (" $) l2src l2src-sz pos ..])
            ((char #) [build-sigilled-token (" #) l2src l2src-sz pos ..])
            ((char ,) [build-sigilled-token (" ,) l2src l2src-sz pos ..])
            ((char `) [build-sigilled-token (" `) l2src l2src-sz pos ..])
            
            [token->fragment [reverse (loop cons-char (l nil) (c c)
              (let (l [cons (tkn-char c) l ..])
                (if [= $pos l2src-sz] l
                  (let (c [getb [+ l2src $pos]])
                    (if (or [isspace c] [= c (lparen)] [= c (rparen)] [= c (lbrace)] [= c (rbrace)] [= c (lbracket)] [= c (rbracket)]) l
                      (begin [set+ pos #1] {cons-char l c})))))) ..]])})))))))

(storage character-flag (begin))

(;; Checks if the fragment d is a token. A token is a non-empty list of characters.)

(constrain i/f:token? (\(r) (with-vars (a) (`(function (frag) ,a)r)r)))

(function i/f:token? (e)
  (let (d [fragment->token e])
    (and (not [vbl? e]) [length d] [= (@ cs-flag[@car d]) character-flag])))

(constrain i/f:token= (\(r) (with-vars (a) (`(function ((list tchar) (list tchar)) ,a)r)r)))

(function i/f:token= (a b)
  (if (not [= [length a] [length b]])
    (false)
    (loop check-car (a a) (b b)
      (if [nil? a]
        (true)
      (if (not [= (@ cs-character [@car a]) (@ cs-character [@car b])])
        (false)
        {check-car [@cdr a] [@cdr b]})))))

(;; Converts the given token into an ASCII string. d is the token that is to be
  converted. r is the buffer into which the string should be put. The return value
  is the constructed string.)

(constrain to-string (\(r) (with-vars (a) (`(function ((list tchar) buffer ,a) string)r)r)))

(function to-string (d r handler) (with return
  (let (str [buffer-alloc [+ [length d] #1] r handler])
    (loop put-char (d d) (i #0)
      (if [nil? d]
        (begin
          [setb [+ str i] (nul)]
          {return str})
        (begin
          [setb [+ str i] (@ cs-character [@car d])]
          {put-char [@cdr d] [+ i #1]}))))))

(;; Copies the given fragment into the given buffer. l is the fragment that is to
  be copied. r is the buffer into which the fragment should be copied. The return
  value is the copied fragment.)

(constrain copy-fragment (\(r) (with-vars (b) (`(function (frag (ref (list vbl)) (ref (list vbl)) buffer ,b) frag)r)r)))

(function copy-fragment (l old-vars new-vars r handler)
  (substitute (.. r handler)
    (if [vbl? l]
      (let (l [frag->var l])
        [var->frag (loop find-var (ovs $old-vars) (nvs $new-vars)
          (if [nil? ovs]
            (let (_ [prepend l old-vars ..]) (__ [prepend [vbl ..] new-vars ..])
              [@car $new-vars])
          (if [vbl= [@car ovs] l] [@car nvs] {find-var [@cdr ovs] [@cdr nvs]})))])
    (if [i/f:token? l]
      [token->fragment
        [reverse (reverse-map (s [fragment->token l]) (tkn-char (@ cs-character s)) ..) ..]]
      [list->fragment
        [reverse (reverse-map (s [frag->list l]) [copy-fragment s old-vars new-vars ..] ..) ..]]))))

(;; Prints the given fragment out to standard output. d is the fragment that is
  to be printed.)

(constrain print-fragment (\(r) (with-vars (b) (`(function (frag ,b) ())r)r)))

(function print-fragment (d hdl)
  (if [vbl? d]
    (begin
      [print-char (stdout) (char !) hdl]
      [print-uint (stdout) [rem d 8192] hdl])
  (if [i/f:token? d]
    (foreach (t [fragment->token d]) [print-char (stdout) (@ cs-character t) hdl])
    (begin
      [print-char (stdout) (lparen) hdl]
      (foreach (fl [frag->list d]) (begin
        [print-fragment fl hdl]
        [print-str (stdout) ("(space)) hdl]))
      [print-char (stdout) (rparen) hdl]))))

