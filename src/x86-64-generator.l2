(function vlayout-frames (n r) (with return (substitute (.. (@0 $r) (@1 $r) (@2 $r)) (begin
	(if (@ expr-return-symbol $n) (begin
		(setf sym-size (@ expr-return-symbol $n) (word-size))
		[prepend (@ expr-return-symbol $n) (& expr-symbols[get-parent-function $n]) ..])
		(begin))
		
	(switch = (@ expr-type $n)
		((-function-) (begin
			(let (parameter-offset [* #7 (word-size)])
				(foreach (t (@ expr-parameters $n)) (begin
					(setf sym-offset (@ expr-symbol $t) $parameter-offset)
					[set parameter-offset [+ $parameter-offset (word-size)]])))
			(let (symbol-offset #0)
				(foreach (u [reverse (@ expr-symbols $n) ..]) (begin
					[set symbol-offset [- $symbol-offset [pad-size (@ sym-size $u) (word-size)]]]
					(setf sym-offset $u $symbol-offset))))))
		
		((-continuation-) (-with-) (begin
			(if (@ expr-escapes $n) (begin
				(setf sym-size (@ expr-symbol(@ expr-reference $n)) (cont-size))
				[append (@ expr-symbol(@ expr-reference $n)) (& expr-symbols[get-parent-function $n]) ..])
				(begin))
			(foreach (t (@ expr-parameters $n)) (begin
				(setf sym-size (@ expr-symbol $t) (word-size))
				[append (@ expr-symbol $t) (& expr-symbols[get-parent-function $n]) ..]))))
		
		((-storage-) (begin
			(setf sym-size (@ expr-symbol(@ expr-reference $n)) [* [length (@ expr-arguments $n)] (word-size)])
			[append (@ expr-symbol(@ expr-reference $n)) (& expr-symbols[get-parent-function $n]) ..]))
		
		(begin))
	
	{return $n}))))

(function make-load (sym offset dest-reg scratch-reg r handler err) (with return
	(let (c nil) (substitute (.. $r $handler $err) (begin
		(if [= (@ sym-type $sym) (dynamic-storage)]
			(let (op1 [make-literal [+ (@ sym-offset $sym) $offset] ..])
				[append (make-asmN (movq-mdb-to-reg) ($op1 (make-asmN(rbp)()..) $dest-reg) ..) c ..])
			(begin
				(let (op1 (make-asmN (stval-add-off-to-ref) ([use-symbol $sym ..] [make-literal $offset ..]) ..))
					[append (make-asmN (movq-imm-to-reg) ($op1 $scratch-reg) ..) c ..])
				[append (make-asmN (movq-mdb-to-reg) ([make-literal #0 ..] $scratch-reg $dest-reg) ..) c ..]))
		{return [make-begin $c ..]})))))

(function make-store (src-reg sym offset scratch-reg r handler err) (with return
	(let (c nil) (substitute (.. $r $handler $err) (begin
		(if [= (@ sym-type $sym) (dynamic-storage)]
			(let (op2 [make-literal [+ (@ sym-offset $sym) $offset] ..])
				[append (make-asmN (movq-from-reg-into-mdb) ($src-reg $op2 (make-asmN(rbp)()..)) ..) c ..])
			(begin
				(let (op1 (make-asmN (stval-add-off-to-ref) ([use-symbol $sym ..] [make-literal $offset ..]) ..))
					[append (make-asmN (movq-imm-to-reg) ($op1 $scratch-reg) ..) c ..])
				[append (make-asmN (movq-from-reg-into-mdb) ($src-reg [make-literal #0 ..] $scratch-reg) ..) c ..]))
		{return [make-begin $c ..]})))))

(function vgenerate-ifs (n r)
	(if [= (@ expr-type $n) (-if-)]
		(with return (let (c nil) (substitute (.. (@0 $r) (@1 $r) (@2 $r)) (begin
			[append [make-load (@ expr-symbol(@ expr-condition $n)) #0 (make-asmN(r10)()..) (make-asmN(r13)()..) ..] c ..]
			[append (make-asmN (orq-reg-to-reg) ((make-asmN(r10)()..) (make-asmN(r10)()..)) ..) c ..]
			(storage alternate-symbol [make-symbol (static-storage) (local-scope) (defined-state) (null) (null) ..])
			(let (op1 (make-asmN (stval-sub-rip-from-ref) ([use-symbol $alternate-symbol ..]) ..))
				[append (make-asmN (je-rel) ($op1) ..) c ..])
			[append (@ expr-consequent $n) c ..]
			(storage end-symbol [make-symbol (static-storage) (local-scope) (defined-state) (null) (null) ..])
			(let (op1 (make-asmN (stval-sub-rip-from-ref) ([use-symbol $end-symbol ..]) ..))
				[append (make-asmN (jmp-rel) ($op1) ..) c ..])
			[append (make-asmN (label) ([use-symbol $alternate-symbol ..]) ..) c ..]
			[append (@ expr-alternate $n) c ..]
			[append (make-asmN (label) ([use-symbol $end-symbol ..]) ..) c ..]
			{return [make-begin $c ..]}))))
		$n))

(function make-load-address (sym dest-reg r handler err) (with return
	(let (c nil) (substitute (.. $r $handler $err) (begin
		(if [= (@ sym-type $sym) (dynamic-storage)]
			(let (op1 [make-literal (@ sym-offset $sym) ..])
				[append (make-asmN (leaq-of-mdb-into-reg) ($op1 (make-asmN(rbp)()..) $dest-reg) ..) c ..])
			[append (make-asmN (movq-imm-to-reg) ([use-symbol $sym ..] $dest-reg) ..) c ..])
		{return [make-begin $c ..]})))))

(function vgenerate-storage-expressions (n r)
	(if [= (@ expr-type $n) (-storage-)]
		(with return (let (c nil) (offset #0) (substitute (.. (@0 $r) (@1 $r) (@2 $r)) (begin
			(foreach (t (@ expr-arguments $n)) (begin
				[append [make-load (@ expr-symbol $t) #0 (make-asmN(r10)()..) (make-asmN(r13)()..) ..] c ..]
				[append [make-store (make-asmN(r10)()..) (@ expr-symbol(@ expr-reference $n)) $offset (make-asmN(r13)()..) ..] c ..]
				[set offset [+ $offset (word-size)]]))
			[append [make-load-address (@ expr-symbol(@ expr-reference $n)) (make-asmN(r11)()..) ..] c ..]
			[append [make-store (make-asmN(r11)()..) (@ expr-return-symbol $n) #0 (make-asmN(r10)()..) ..] c ..]
			{return [make-begin $c ..]}))))
		$n))

(function vgenerate-references (n r)
	(if (and [= (@ expr-type $n) (-reference-)] (@ expr-return-symbol $n))
		(with return (let (c nil) (substitute (.. (@0 $r) (@1 $r) (@2 $r)) (begin
			[append [make-load-address (@ expr-symbol $n) (make-asmN(r11)()..) ..] c ..]
			[append [make-store (make-asmN(r11)()..) (@ expr-return-symbol $n) #0 (make-asmN(r10)()..) ..] c ..]
			{return [make-begin $c ..]}))))
		$n))

(function cont-instr-ref (n r handler err) (with return (begin
	(if (@ expr-cont-instr-ref $n) (begin)
		(substitute (.. $r $handler $err) (setf expr-cont-instr-ref $n
			[use-symbol [make-symbol (static-storage) (local-scope) (defined-state) (nul) (null) ..] ..])))
	{return (@ expr-cont-instr-ref $n)})))

(function make-store-continuation (n r handler err)
	(with return (let (c nil) (substitute (.. $r $handler $err) (begin
		[append [make-store (make-asmN(rbx)()..) (@ expr-symbol(@ expr-reference $n)) (cont-rbx) (make-asmN(r11)()..) ..] c ..]
		[append [make-store (make-asmN(r12)()..) (@ expr-symbol(@ expr-reference $n)) (cont-r12) (make-asmN(r11)()..) ..] c ..]
		[append [make-store (make-asmN(r13)()..) (@ expr-symbol(@ expr-reference $n)) (cont-r13) (make-asmN(r11)()..) ..] c ..]
		[append [make-store (make-asmN(r14)()..) (@ expr-symbol(@ expr-reference $n)) (cont-r14) (make-asmN(r11)()..) ..] c ..]
		[append [make-store (make-asmN(r15)()..) (@ expr-symbol(@ expr-reference $n)) (cont-r15) (make-asmN(r11)()..) ..] c ..]
		[append [make-load-address (@ expr-symbol[cont-instr-ref $n ..]) (make-asmN(r10)()..) ..] c ..]
		[append [make-store (make-asmN(r10)()..) (@ expr-symbol(@ expr-reference $n)) (cont-cir) (make-asmN(r11)()..) ..] c ..]
		[append [make-store (make-asmN(rbp)()..) (@ expr-symbol(@ expr-reference $n)) (cont-rbp) (make-asmN(r11)()..) ..] c ..]
		{return [make-begin $c ..]})))))

(function move-arguments (n offset r handler err)
	(with return (let (c nil) (substitute (.. $r $handler $err) (begin
		(foreach (t (@ expr-arguments $n)) (begin
			[append [make-load (@ expr-symbol $t) #0 (make-asmN(r10)()..) (make-asmN(r13)()..) ..] c ..]
			[append (make-asmN (movq-from-reg-into-mdb)
				((make-asmN(r10)()..) [make-literal $offset ..] (make-asmN(r11)()..)) ..) c ..]
			[set offset [+ $offset (word-size)]]))
		{return [make-begin $c ..]})))))

(function vgenerate-continuation-expressions (n r) (with return (let (c nil)
	(substitute (.. (@0 $r) (@1 $r) (@2 $r)) (switch = (@ expr-type $n)
		((-continuation-) (begin
			[append [make-load-address (if (@ expr-escapes $n) (@ expr-symbol(@ expr-reference $n)) [cont-instr-ref $n ..])
				(make-asmN(r11)()..) ..] c ..]
			[append [make-store (make-asmN(r11)()..) (@ expr-return-symbol $n) #0 (make-asmN(r10)()..) ..] c ..]
			(if (@ expr-escapes $n) [append [make-store-continuation $n ..] c ..] (begin))
			(storage after-symbol [make-symbol (static-storage) (local-scope) (defined-state) (nul) (null) ..])
			[append (make-asmN (jmp-rel) ((make-asmN (stval-sub-rip-from-ref) ([use-symbol $after-symbol ..]) ..)) ..) c ..]
			[append (make-asmN (label) ([cont-instr-ref $n ..]) ..) c ..]
			[append (@ expr-expression $n) c ..]
			[append (make-asmN (label) ([use-symbol $after-symbol ..]) ..) c ..]
			{return [make-begin $c ..]}))
		
		((-with-) (begin
			(if (@ expr-escapes $n) [append [make-store-continuation $n ..] c ..] (begin))
			[append (@ expr-expression $n) c ..]
			[append (make-asmN (label) ([cont-instr-ref $n ..]) ..) c ..]
			[append [make-load (@ expr-symbol[@car(@ expr-parameters $n)]) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) ..] c ..]
			[append [make-store (make-asmN(r11)()..) (@ expr-return-symbol $n) #0 (make-asmN(r10)()..) ..] c ..]
			{return [make-begin $c ..]}))
		
		((-jump-) (begin
			(if (@ expr-short-circuit $n)
			(begin
				(if [length (@ expr-parameters(@ expr-short-circuit $n))] (begin
					[append [make-load-address (@ expr-symbol[@car (@ expr-parameters(@ expr-short-circuit $n))])
						(make-asmN(r11)()..) ..] c ..]
					[append [move-arguments $n #0 ..] c ..])
					(begin))
				[append (make-asmN (jmp-rel) ((make-asmN (stval-sub-rip-from-ref)
					([cont-instr-ref (@ expr-short-circuit $n) ..]) ..)) ..) c ..])
			(begin
				[append [make-load (@ expr-symbol(@ expr-reference $n)) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) ..] c ..]
				[append [move-arguments $n (cont-size) ..] c ..]
				[append (make-asmN(movq-mdb-to-reg)([make-literal(cont-rbx)..] (make-asmN(r11)()..) (make-asmN(rbx)()..))..) c ..]
				[append (make-asmN(movq-mdb-to-reg)([make-literal(cont-r12)..] (make-asmN(r11)()..) (make-asmN(r12)()..))..) c ..]
				[append (make-asmN(movq-mdb-to-reg)([make-literal(cont-r13)..] (make-asmN(r11)()..) (make-asmN(r13)()..))..) c ..]
				[append (make-asmN(movq-mdb-to-reg)([make-literal(cont-r14)..] (make-asmN(r11)()..) (make-asmN(r14)()..))..) c ..]
				[append (make-asmN(movq-mdb-to-reg)([make-literal(cont-r15)..] (make-asmN(r11)()..) (make-asmN(r15)()..))..) c ..]
				[append (make-asmN(movq-mdb-to-reg)([make-literal(cont-cir)..] (make-asmN(r11)()..) (make-asmN(r10)()..))..) c ..]
				[append (make-asmN(movq-mdb-to-reg)([make-literal(cont-rbp)..] (make-asmN(r11)()..) (make-asmN(rbp)()..))..) c ..]
				[append (make-asmN(jmp-to-reg)((make-asmN(r10)()..))..) c ..]))
			{return [make-begin $c ..]}))
		
		{return $n})))))

(function vgenerate-literals (n r)
	(if (and [= (@ expr-type $n) (-literal-)] (@ expr-return-symbol $n))
		(with return (let (c nil) (substitute (.. (@0 $r) (@1 $r) (@2 $r)) (begin
			[append (make-asmN(movq-imm-to-reg)([make-literal(@ expr-value $n)..] (make-asmN(r11)()..))..) c ..]
			[append [make-store (make-asmN(r11)()..) (@ expr-return-symbol $n) #0 (make-asmN(r13)()..) ..] c ..]
			{return [make-begin $c ..]}))))
		$n))

(function generate-toplevel (n r handler err) (with return
	(let (c nil) (substitute (.. $r $handler $err) (begin
		[append (make-asmN(pushq-reg)((make-asmN(r12)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(r13)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(r14)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(r15)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(rbx)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(rbp)()..))..) c ..]
		[append (make-asmN(movq-reg-to-reg)((make-asmN(rsp)()..) (make-asmN(rbp)()..))..) c ..]
		[append (@ expr-expression $n) c ..]
		[append (make-asmN(leave)()..) c ..]
		[append (make-asmN(popq-reg)((make-asmN(rbx)()..))..) c ..]
		[append (make-asmN(popq-reg)((make-asmN(r15)()..))..) c ..]
		[append (make-asmN(popq-reg)((make-asmN(r14)()..))..) c ..]
		[append (make-asmN(popq-reg)((make-asmN(r13)()..))..) c ..]
		[append (make-asmN(popq-reg)((make-asmN(r12)()..))..) c ..]
		[append (make-asmN(ret)()..) c ..]
		{return [make-begin $c ..]})))))

(function get-current-offset (func)
	(if [> [length (@ expr-symbols $func)] #0]
		(@ sym-offset [@car (@ expr-symbols $func)])
		#0))

(function vgenerate-function-expressions (n r) (with return (let (c nil)
	(substitute (.. (@0 $r) (@1 $r) (@2 $r)) (if (and [= (@ expr-type $n) (-function-)] (@ expr-parent $n)) (begin
		[append [make-load-address (@ expr-symbol(@ expr-reference $n)) (make-asmN(r11)()..) ..] c ..]
		[append [make-store (make-asmN(r11)()..) (@ expr-return-symbol $n) #0 (make-asmN(r10)()..) ..] c ..]
		(storage after-symbol [make-symbol (static-storage) (local-scope) (defined-state) (null) (null) ..])
		[append (make-asmN(jmp-rel)((make-asmN(stval-sub-rip-from-ref)([use-symbol $after-symbol ..])..))..) c ..]
		[append (make-asmN(label)((@ expr-reference $n))..) c ..]
		
		(;; Insert first 6 parameters onto stack)
		[append (make-asmN(popq-reg)((make-asmN(r11)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(r9)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(r8)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(rcx)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(rdx)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(rsi)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(rdi)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(r11)()..))..) c ..]
		
		(;; Save callee-saved registers)
		[append (make-asmN(pushq-reg)((make-asmN(r12)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(r13)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(r14)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(r15)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(rbx)()..))..) c ..]
		
		[append (make-asmN(pushq-reg)((make-asmN(rbp)()..))..) c ..]
		[append (make-asmN(movq-reg-to-reg)((make-asmN(rsp)()..) (make-asmN(rbp)()..))..) c ..]
		[append (make-asmN(subq-imm-from-reg)([make-literal [- #0 [get-current-offset $n]] ..] (make-asmN(rsp)()..))..) c ..]
		
		(;; Execute the function body)
		[append (@ expr-expression $n) c ..]
		
		(;; Place the return value)
		[append [make-load (@ expr-expression-return-symbol $n) #0 (make-asmN(rax)()..) (make-asmN(r13)()..) ..] c ..]
		
		[append (make-asmN(leave)()..) c ..]
		(;; Restore callee-saved registers)
		[append (make-asmN(popq-reg)((make-asmN(rbx)()..))..) c ..]
		[append (make-asmN(popq-reg)((make-asmN(r15)()..))..) c ..]
		[append (make-asmN(popq-reg)((make-asmN(r14)()..))..) c ..]
		[append (make-asmN(popq-reg)((make-asmN(r13)()..))..) c ..]
		[append (make-asmN(popq-reg)((make-asmN(r12)()..))..) c ..]
		
		[append (make-asmN(popq-reg)((make-asmN(r11)()..))..) c ..]
		[append (make-asmN(addq-imm-to-reg)([make-literal [* #6(word-size)]..] (make-asmN(rsp)()..))..) c ..]
		[append (make-asmN(pushq-reg)((make-asmN(r11)()..))..) c ..]
		[append (make-asmN(ret)()..) c ..]
		[append (make-asmN(label)([use-symbol $after-symbol ..])..) c ..]
		{return [make-begin $c ..]})
		
	(if [= (@ expr-type $n) (-invoke-)] (begin
		(if [> [length (@ expr-arguments $n)] #6]
			(foreach (t [reverse [@cddddddr(@ expr-arguments $n)] ..]) (begin
				[append [make-load (@ expr-symbol $t) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) ..] c ..]
				[append (make-asmN(pushq-reg)((make-asmN(r11)()..))..) c ..]))
			(begin))
		(if [> [length (@ expr-arguments $n)] #5]
			[append [make-load (@ expr-symbol[@cadddddr(@ expr-arguments $n)]) #0 (make-asmN(r9)()..) (make-asmN(r10)()..) ..] c ..]
			(begin))
		(if [> [length (@ expr-arguments $n)] #4]
			[append [make-load (@ expr-symbol[@caddddr(@ expr-arguments $n)]) #0 (make-asmN(r8)()..) (make-asmN(r10)()..) ..] c ..]
			(begin))
		(if [> [length (@ expr-arguments $n)] #3]
			[append [make-load (@ expr-symbol[@cadddr(@ expr-arguments $n)]) #0 (make-asmN(rcx)()..) (make-asmN(r10)()..) ..] c ..]
			(begin))
		(if [> [length (@ expr-arguments $n)] #2]
			[append [make-load (@ expr-symbol[@caddr(@ expr-arguments $n)]) #0 (make-asmN(rdx)()..) (make-asmN(r10)()..) ..] c ..]
			(begin))
		(if [> [length (@ expr-arguments $n)] #1]
			[append [make-load (@ expr-symbol[@cadr(@ expr-arguments $n)]) #0 (make-asmN(rsi)()..) (make-asmN(r10)()..) ..] c ..]
			(begin))
		(if [> [length (@ expr-arguments $n)] #0]
			[append [make-load (@ expr-symbol[@car(@ expr-arguments $n)]) #0 (make-asmN(rdi)()..) (make-asmN(r10)()..) ..] c ..]
			(begin))
		
		[append (make-asmN(movq-imm-to-reg)([make-literal #0 ..] (make-asmN(rax)()..))..) c ..]
		[append [make-load (@ expr-symbol(@ expr-reference $n)) #0 (make-asmN(r11)()..) (make-asmN(r10)()..) ..] c ..]
		[append (make-asmN(call-reg)((make-asmN(r11)()..))..) c ..]
		[append [make-store (make-asmN(rax)()..) (@ expr-return-symbol $n) #0 (make-asmN(r10)()..) ..] c ..]
		(if [> [length (@ expr-arguments $n)] #6]
			(let (drop [*(word-size)[-[length(@ expr-arguments $n)]#6]])
				[append (make-asmN(addq-imm-to-reg)([make-literal $drop ..] (make-asmN(rsp)()..))..) c ..])
			(begin))
		{return [make-begin $c ..]})
		
	{return $n}))))))
