(function vlayout-frames (n r) (with return (substitute (.. (@0 r) (@1 r) (@2 r)) (begin
	(switch = (@ expr-type n)
		((-function-) (begin
			(storage parameter-offset-ref [* #2 (word-size)])
			(foreach (t (@ expr-parameters n)) (begin
				(setf bndg-offset (@ expr-binding-aug t) $parameter-offset-ref)
				[set+ parameter-offset-ref (word-size)]))
				
			(storage binding-offset-ref #0)
			(foreach (u [reverse (@ expr-binding-augs n) ..]) (begin
				[set- binding-offset-ref [pad-size (@ bndg-size u) (word-size)]]
				(setf bndg-offset u $binding-offset-ref)))))
		
		((-continuation-) (-with-) (begin
			(if (@ expr-escapes n) (begin
				(setf bndg-size (@ expr-binding-aug(@ expr-reference n)) (cont-size))
				[append (@ expr-binding-aug(@ expr-reference n)) (& expr-binding-augs[get-parent-function n]) ..])
				(begin))
			(foreach (t (@ expr-parameters n)) (begin
				(setf bndg-size (@ expr-binding-aug t) (word-size))
				[append (@ expr-binding-aug t) (& expr-binding-augs[get-parent-function n]) ..]))))
		
		((-storage-) (begin
			(setf bndg-size (@ expr-binding-aug(@ expr-reference n)) [* [length (@ expr-arguments n)] (word-size)])
			[append (@ expr-binding-aug(@ expr-reference n)) (& expr-binding-augs[get-parent-function n]) ..]))
		
		((-jump-) (-invoke-) (begin
			(setf bndg-size (@ expr-temp-storage-bndg n) [* (word-size) [length (@ expr-arguments n)]])
			(switch = (@ expr-contains-flag n)
				((contains-with)
					[append (@ expr-temp-storage-bndg n) (& expr-binding-augs[get-parent-function n]) ..])
				((contains-jump)
					(setf bndg-storage (@ expr-temp-storage-bndg n) (nil-storage)))
				((contains-none) (begin
					(setf bndg-storage (@ expr-temp-storage-bndg n) (top-relative-storage))
					(setf bndg-offset (@ expr-temp-storage-bndg n) #0)))
				(begin))))
		
		(begin))
	
	{return n}))))

(function generate-load (bndg offset dest-reg scratch-reg c r handler err)
	(substitute (.. r handler err)
		(switch = (@ bndg-storage bndg)
			((frame-relative-storage)
				(let (op1 [make-literal [+ (@ bndg-offset bndg) offset] ..])
					[prepend (make-asmN (movq-mdb-to-reg) (op1 (make-asmN(rbp)()..) dest-reg) ..) c ..]))
					
			((absolute-storage) (begin
				(let (op1 (make-asmN (lnkr-add-off-to-ref) ([use-binding-aug bndg ..] [make-literal offset ..]) ..))
					[prepend (make-asmN (movq-imm-to-reg) (op1 scratch-reg) ..) c ..])
				[prepend (make-asmN (movq-mdb-to-reg) ([make-literal #0 ..] scratch-reg dest-reg) ..) c ..]))
				
			((top-relative-storage)
				(let (op1 [make-literal [+ (@ bndg-offset bndg) offset] ..])
					[prepend (make-asmN (movq-mdb-to-reg) (op1 (make-asmN(rsp)()..) dest-reg) ..) c ..]))
					
			(begin))))

(function generate-store (src-reg bndg offset scratch-reg c r handler err)
	(substitute (.. r handler err)
		(switch = (@ bndg-storage bndg)
			((frame-relative-storage)
				(let (op2 [make-literal [+ (@ bndg-offset bndg) offset] ..])
					[prepend (make-asmN (movq-reg-to-mdb) (src-reg op2 (make-asmN(rbp)()..)) ..) c ..]))
					
			((absolute-storage) (begin
				(let (op1 (make-asmN (lnkr-add-off-to-ref) ([use-binding-aug bndg ..] [make-literal offset ..]) ..))
					[prepend (make-asmN (movq-imm-to-reg) (op1 scratch-reg) ..) c ..])
				[prepend (make-asmN (movq-reg-to-mdb) (src-reg [make-literal #0 ..] scratch-reg) ..) c ..]))
				
			((top-relative-storage)
				(let (op2 [make-literal [+ (@ bndg-offset bndg) offset] ..])
					[prepend (make-asmN (movq-reg-to-mdb) (src-reg op2 (make-asmN(rsp)()..)) ..) c ..]))
					
			(begin))))

(function generate-if (n c r handler err)
	(substitute (.. r handler err) (begin
		[generate-expression (@ expr-condition n) c ..]
		[prepend (make-asmN (orq-reg-to-reg) ((make-asmN(rax)()..) (make-asmN(rax)()..)) ..) c ..]
		(define (alternate-binding [make-binding-aug (absolute-storage) (local-scope) (defined-state) null-string null-expr ..])
		(let (op1 (make-asmN (lnkr-sub-rip-to-ref) ([use-binding-aug alternate-binding ..]) ..))
			[prepend (make-asmN (je-rel) (op1) ..) c ..])
		[generate-expression (@ expr-consequent n) c ..]
		(define (end-binding [make-binding-aug (absolute-storage) (local-scope) (defined-state) null-string null-expr ..])
		(let (op1 (make-asmN (lnkr-sub-rip-to-ref) ([use-binding-aug end-binding ..]) ..))
			[prepend (make-asmN (jmp-rel) (op1) ..) c ..])
		[prepend (make-asmN (label) ([use-binding-aug alternate-binding ..]) ..) c ..]
		[generate-expression (@ expr-alternate n) c ..]
		[prepend (make-asmN (label) ([use-binding-aug end-binding ..]) ..) c ..])))))

(function generate-load-address (bndg dest-reg c r handler err)
	(substitute (.. r handler err)
		(switch = (@ bndg-storage bndg)
			((frame-relative-storage)
				(let (op1 [make-literal (@ bndg-offset bndg) ..])
					[prepend (make-asmN (leaq-mdb-to-reg) (op1 (make-asmN(rbp)()..) dest-reg) ..) c ..]))
					
			((absolute-storage)
				[prepend (make-asmN (movq-imm-to-reg) ([use-binding-aug bndg ..] dest-reg) ..) c ..])
				
			((top-relative-storage)
				(let (op1 [make-literal (@ bndg-offset bndg) ..])
					[prepend (make-asmN (leaq-mdb-to-reg) (op1 (make-asmN(rsp)()..) dest-reg) ..) c ..]))
					
			(begin))))

(function generate-storage (n c r handler err)
	(substitute (.. r handler err) (begin
		(storage offset-ref #0)
		(foreach (t (@ expr-arguments n)) (begin
			[generate-expression t c ..]
			[generate-store (make-asmN(rax)()..) (@ expr-binding-aug(@ expr-reference n)) $offset-ref (make-asmN(r11)()..) c ..]
			[set+ offset-ref (word-size)]))
		[generate-load-address (@ expr-binding-aug(@ expr-reference n)) (make-asmN(rax)()..) c ..])))

(function generate-reference (n c r handler err)
	(substitute (.. r handler err)
		(let (def (@ bndg-definition(@ expr-binding-aug n)))
			(if (and (or [= (@ expr-type(@ expr-parent def)) (-function-)] [= (@ expr-type(@ expr-parent def)) (-continuation-)])
					(default wth (find (x (@ expr-parameters(@ expr-parent def))) [= x def] {wth (false)}) (true)))
				[generate-load (@ expr-binding-aug n) #0 (make-asmN(rax)()..) (make-asmN(r11)()..) c ..]
				[generate-load-address (@ expr-binding-aug n) (make-asmN(rax)()..) c ..]))))

(function generate-store-continuation (n c r handler err)
	(substitute (.. r handler err) (begin
		[generate-store (make-asmN(rbx)()..) (@ expr-binding-aug(@ expr-reference n)) (cont-rbx) (make-asmN(r11)()..) c ..]
		[generate-store (make-asmN(r12)()..) (@ expr-binding-aug(@ expr-reference n)) (cont-r12) (make-asmN(r11)()..) c ..]
		[generate-store (make-asmN(r13)()..) (@ expr-binding-aug(@ expr-reference n)) (cont-r13) (make-asmN(r11)()..) c ..]
		[generate-store (make-asmN(r14)()..) (@ expr-binding-aug(@ expr-reference n)) (cont-r14) (make-asmN(r11)()..) c ..]
		[generate-store (make-asmN(r15)()..) (@ expr-binding-aug(@ expr-reference n)) (cont-r15) (make-asmN(r11)()..) c ..]
		[generate-store (make-asmN(rdi)()..) (@ expr-binding-aug(@ expr-reference n)) (cont-rdi) (make-asmN(r11)()..) c ..]
		[generate-store (make-asmN(rsi)()..) (@ expr-binding-aug(@ expr-reference n)) (cont-rsi) (make-asmN(r11)()..) c ..]
		[generate-load-address (@ expr-cont-instr-bndg n) (make-asmN(r10)()..) c ..]
		[generate-store (make-asmN(r10)()..) (@ expr-binding-aug(@ expr-reference n)) (cont-cir) (make-asmN(r11)()..) c ..]
		[generate-store (make-asmN(rbp)()..) (@ expr-binding-aug(@ expr-reference n)) (cont-rbp) (make-asmN(r11)()..) c ..])))

(function cond-push-relative-storage (n c r handler err) (substitute (.. r handler err)
	(if [= (@ bndg-storage (@ expr-temp-storage-bndg n)) (top-relative-storage)]
		[prepend (make-asmN(subq-imm-to-reg) ([make-literal [* [length (@ expr-arguments n)] (word-size)] ..] (make-asmN(rsp)()..)) ..) c ..]
		(begin))))

(function cond-pop-relative-storage (n c r handler err) (substitute (.. r handler err)
	(if [= (@ bndg-storage (@ expr-temp-storage-bndg n)) (top-relative-storage)]
		[prepend (make-asmN(addq-imm-to-reg) ([make-literal [* [length (@ expr-arguments n)] (word-size)] ..] (make-asmN(rsp)()..)) ..) c ..]
		(begin))))

(function generate-args-to-buffer (n c r handler err) (substitute (.. r handler err) (begin
	(storage offset #0)
	(foreach (t (@ expr-arguments n)) (begin
		[generate-expression t c ..]
		[generate-store (make-asmN(rax)()..) (@ expr-temp-storage-bndg n) $offset (make-asmN(r10)()..) c ..]
		[set+ offset (word-size)])))))

(function generate-buffer-to-dest (n dest-reg offset c r handler err) (substitute (.. r handler err) (begin
	(storage src-offset #0)
	(storage dest-offset offset)
	(foreach (t (@ expr-arguments n)) (begin
		[generate-load (@ expr-temp-storage-bndg n) $src-offset (make-asmN(rax)()..) (make-asmN(r10)()..) c ..]
		[prepend (make-asmN(movq-reg-to-mdb) ((make-asmN(rax)()..) [make-literal $dest-offset r] dest-reg) ..) c ..]
		[set+ src-offset (word-size)]
		[set+ dest-offset (word-size)])))))

(function generate-continuation (n c r handler err)
	(substitute (.. r handler err) (begin
		(if (@ expr-escapes n) (begin
			[generate-load-address (@ expr-binding-aug (@ expr-reference n)) (make-asmN(rax)()..) c ..]
			[generate-store-continuation n c ..])
			(begin))
		
		(define (after-binding [make-binding-aug (absolute-storage) (local-scope) (defined-state) null-string null-expr ..])
		[prepend (make-asmN (jmp-rel) ((make-asmN (lnkr-sub-rip-to-ref) ([use-binding-aug after-binding ..]) ..)) ..) c ..]
		[prepend (make-asmN (label) ([use-binding-aug (@ expr-cont-instr-bndg n) ..]) ..) c ..]
		[generate-expression (@ expr-expression n) c ..]
		[prepend (make-asmN (label) ([use-binding-aug after-binding ..]) ..) c ..]))))

(function generate-with (n c r handler err)
	(substitute (.. r handler err) (begin
		(if (@ expr-escapes n) [generate-store-continuation n c ..] (begin))
		[generate-expression (@ expr-expression n) c ..]
		[prepend (make-asmN (label) ([use-binding-aug (@ expr-cont-instr-bndg n) ..]) ..) c ..]
		[generate-load (@ expr-binding-aug[@car(@ expr-parameters n)]) #0 (make-asmN(rax)()..) (make-asmN(r10)()..) c ..])))

(function generate-jump (n c r handler err)
	(substitute (.. r handler err)
		(if [not= (@ expr-short-circuit n) null-expr]
			(begin
				(if [= (@ expr-type(@ expr-reference n)) (-continuation-)]
					[generate-expression (@ expr-reference n) c ..]
					(begin))
				(if [length (@ expr-parameters(@ expr-short-circuit n))] (begin
					[cond-push-relative-storage n c ..]
					[generate-args-to-buffer n c ..]
					[generate-load-address (@ expr-binding-aug[@car (@ expr-parameters(@ expr-short-circuit n))]) (make-asmN(r11)()..) c ..]
					[generate-buffer-to-dest n (make-asmN(r11)()..) #0 c ..]
					[cond-pop-relative-storage n c ..])
					(begin))
				[prepend (make-asmN (jmp-rel) ((make-asmN (lnkr-sub-rip-to-ref)
					([use-binding-aug (@ expr-cont-instr-bndg(@ expr-short-circuit n)) ..]) ..)) ..) c ..])
			(begin
				[cond-push-relative-storage n c ..]
				[generate-args-to-buffer n c ..]
				[generate-expression (@ expr-reference n) c ..]
				[prepend (make-asmN(movq-reg-to-reg)((make-asmN(rax)()..) (make-asmN(r11)()..))..) c ..]
				[generate-buffer-to-dest n (make-asmN(r11)()..) (cont-size) c ..]
				[cond-pop-relative-storage n c ..]
				
				[prepend (make-asmN(movq-mdb-to-reg)([make-literal(cont-rbx)..] (make-asmN(r11)()..) (make-asmN(rbx)()..))..) c ..]
				[prepend (make-asmN(movq-mdb-to-reg)([make-literal(cont-r12)..] (make-asmN(r11)()..) (make-asmN(r12)()..))..) c ..]
				[prepend (make-asmN(movq-mdb-to-reg)([make-literal(cont-r13)..] (make-asmN(r11)()..) (make-asmN(r13)()..))..) c ..]
				[prepend (make-asmN(movq-mdb-to-reg)([make-literal(cont-r14)..] (make-asmN(r11)()..) (make-asmN(r14)()..))..) c ..]
				[prepend (make-asmN(movq-mdb-to-reg)([make-literal(cont-r15)..] (make-asmN(r11)()..) (make-asmN(r15)()..))..) c ..]
				[prepend (make-asmN(movq-mdb-to-reg)([make-literal(cont-rdi)..] (make-asmN(r11)()..) (make-asmN(rdi)()..))..) c ..]
				[prepend (make-asmN(movq-mdb-to-reg)([make-literal(cont-rsi)..] (make-asmN(r11)()..) (make-asmN(rsi)()..))..) c ..]
				[prepend (make-asmN(movq-mdb-to-reg)([make-literal(cont-cir)..] (make-asmN(r11)()..) (make-asmN(r10)()..))..) c ..]
				[prepend (make-asmN(movq-mdb-to-reg)([make-literal(cont-rbp)..] (make-asmN(r11)()..) (make-asmN(rbp)()..))..) c ..]
				[prepend (make-asmN(jmp-to-reg)((make-asmN(r10)()..))..) c ..]))))

(function generate-literal (n c r handler err) (substitute (.. r handler err)
	[prepend (make-asmN(movq-imm-to-reg)([make-literal(@ expr-value n)..] (make-asmN(rax)()..))..) c ..]))

(function get-current-offset (func)
	(if [> [length (@ expr-binding-augs func)] #0]
		(@ bndg-offset [@car (@ expr-binding-augs func)])
		#0))

(function generate-function (n c r handler err)
	(substitute (.. r handler err) (begin
		[generate-load-address (@ expr-binding-aug(@ expr-reference n)) (make-asmN(rax)()..) c ..]
		
		(define (after-binding [make-binding-aug (absolute-storage) (local-scope) (defined-state) null-string null-expr ..])
		[prepend (make-asmN(jmp-rel)((make-asmN(lnkr-sub-rip-to-ref)([use-binding-aug after-binding ..])..))..) c ..]
		[prepend (make-asmN(label)((@ expr-reference n))..) c ..]
		
		(;; Insert first 4 parameters onto stack)
		[prepend (make-asmN(movq-reg-to-mdb) ((make-asmN(rcx)()..) [make-literal #8 r] (make-asmN(rsp)()..)) ..) c ..]
		[prepend (make-asmN(movq-reg-to-mdb) ((make-asmN(rdx)()..) [make-literal #16 r] (make-asmN(rsp)()..)) ..) c ..]
		[prepend (make-asmN(movq-reg-to-mdb) ((make-asmN(r8)()..) [make-literal #24 r] (make-asmN(rsp)()..)) ..) c ..]
		[prepend (make-asmN(movq-reg-to-mdb) ((make-asmN(r9)()..) [make-literal #32 r] (make-asmN(rsp)()..)) ..) c ..]
		
		[prepend (make-asmN(pushq-reg)((make-asmN(rbp)()..))..) c ..]
		[prepend (make-asmN(movq-reg-to-reg)((make-asmN(rsp)()..) (make-asmN(rbp)()..))..) c ..]
		[prepend (make-asmN(subq-imm-to-reg)([make-literal [- #0 [get-current-offset n]] ..] (make-asmN(rsp)()..))..) c ..]
		
		(;; Execute the function body)
		[generate-expression (@ expr-expression n) c ..]
		
		[prepend (make-asmN(leave)()..) c ..]
		[prepend (make-asmN(ret)()..) c ..]
		[prepend (make-asmN(label)([use-binding-aug after-binding ..])..) c ..]))))

(function generate-invoke (n c r handler err)
	(substitute (.. r handler err) (begin
		(if (and [= (@ expr-contains-flag n) (contains-none)] [< [length(@ expr-arguments n)] #4])
			[prepend (make-asmN(subq-imm-to-reg) ([make-literal [* [- #4 [length(@ expr-arguments n)]] (word-size)] ..] (make-asmN(rsp)()..)) ..) c ..]
			(begin))
		[cond-push-relative-storage n c ..]
		[generate-args-to-buffer n c ..]
		[generate-expression (@ expr-reference n) c ..]
		
		(if [= (@ expr-contains-flag n) (contains-with)]
			(begin
				(if [< [length(@ expr-arguments n)] #4]
					[prepend (make-asmN(subq-imm-to-reg) ([make-literal [* [- #4 [length(@ expr-arguments n)]] (word-size)] ..] (make-asmN(rsp)()..)) ..) c ..]
					(begin))
				(loop move-args (offset [* [length (@ expr-arguments n)] (word-size)])
					(if offset (begin
						(define (offset [- offset (word-size)])
						[generate-load (@ expr-temp-storage-bndg n) offset (make-asmN(r11)()..) (make-asmN(r10)()..) c ..]
						[prepend (make-asmN(pushq-reg) ((make-asmN(r11)()..)) ..) c ..]
						{move-args offset}))
						(begin))))
			(begin))
		
		[prepend (make-asmN(movq-mdb-to-reg)([make-literal #0 ..] (make-asmN(rsp)()..) (make-asmN(rcx)()..))..) c ..]
		[prepend (make-asmN(movq-mdb-to-reg)([make-literal #8 ..] (make-asmN(rsp)()..) (make-asmN(rdx)()..))..) c ..]
		[prepend (make-asmN(movq-mdb-to-reg)([make-literal #16 ..] (make-asmN(rsp)()..) (make-asmN(r8)()..))..) c ..]
		[prepend (make-asmN(movq-mdb-to-reg)([make-literal #24 ..] (make-asmN(rsp)()..) (make-asmN(r9)()..))..) c ..]
		[prepend (make-asmN(call-reg)((make-asmN(rax)()..))..) c ..]
		
		(let (drop [*(word-size)[max [length(@ expr-arguments n)] #4]])
			[prepend (make-asmN(addq-imm-to-reg)([make-literal drop ..] (make-asmN(rsp)()..))..) c ..]))))

(function generate-begin (n c r handler err)
	(substitute (.. r handler err)
		(foreach (t (@ expr-expressions n)) [generate-expression t c ..])))

(function generate-expression (n c r handler err)
	(substitute (.. r handler err) [(switch = (@ expr-type n)
		((-begin-) generate-begin)
		((-continuation-) generate-continuation)
		((-with-) generate-with)
		((-jump-) generate-jump)
		((-symbol-) generate-reference)
		((-storage-) generate-storage)
		((-if-) generate-if)
		((-literal-) generate-literal)
		((-function-) generate-function)
		((-invoke-) generate-invoke)
		(begin)) n c ..]))

(function generate-program (n bindings r handler err) (with return
	(substitute (.. r handler err) (begin
		[set bindings (@ expr-binding-augs n)]
		(storage c nil)
		[prepend (make-asmN(pushq-reg)((make-asmN(rbp)()..))..) c ..]
		[prepend (make-asmN(movq-reg-to-reg)((make-asmN(rsp)()..) (make-asmN(rbp)()..))..) c ..]
		[generate-expression (@ expr-expression n) c ..]
		[prepend (make-asmN(leave)()..) c ..]
		[prepend (make-asmN(ret)()..) c ..]
		{return [reverse $c ..]}))))

