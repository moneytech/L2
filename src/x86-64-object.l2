(;; The constants and fields to be used in x86-64-object.l2)

(function object (l r) (`[* #6(unit)]r))

(function obj-ehdr (l r) [property #0 #8 (\(r) (` obj r)) (\(s r) [var r]) l r])

(function obj-shdrs (l r) [property #8 #8 (\(r) (` obj r)) (\(s r) [var r]) l r])

(function obj-syms (l r) [property #16 #8 (\(r) (` obj r)) (\(s r) [var r]) l r])

(function obj-relas (l r) [property #24 #8 (\(r) (` obj r)) (\(s r) [var r]) l r])

(function obj-addends (l r) [property #32 #8 (\(r) (` obj r)) (\(s r) [var r]) l r])

(function obj-segs (l r) [property #40 #8 (\(r) (` obj r)) (\(s r) [var r]) l r])

(function binding (l r) (`[* #2(unit)]r))

(;; Does the relocations specified in the object file in light of the current
  binding addresses. The continuation handler is followed and the error buffer
  referenced by err set to the singleton (object-error) if relocation type
  is unrecognized. Note: Implementation is hacky since it does not perform
  checks to confirm that the performed relocations are correct.)

(constrain do-relocations (\(r) (with-vars (a) (`(function (obj ,a) ())r)r)))

(function do-relocations (obj handler)
  (until (sec-idx #0) [= sec-idx (@ e-shnum(@ obj-ehdr obj))] [+ sec-idx #1]
    (let (shdr-buf (loc (elf64-shdr) sec-idx (@ obj-shdrs obj)))
    (if (or [= (@ sh-type shdr-buf) (sht-rela)] [= (@ sh-type shdr-buf) (sht-rel)])
      (let (relanum [/ (@ sh-size shdr-buf) (@ sh-entsize shdr-buf)])
      (let (relas-buf ($(loc (unit) sec-idx (@ obj-relas obj))))
      (let (addends-buf ($(loc (unit) sec-idx (@ obj-addends obj))))
      (until (rela-idx #0) [= rela-idx relanum] [+ rela-idx #1]
        (let (syms-buf ($(loc (unit) (@ sh-link shdr-buf) (@ obj-syms obj))))
        (let (rela (loc (elf64-rela) rela-idx relas-buf))
        (let (addend ($(loc (elf64-sxword) rela-idx addends-buf)))
        (let (sym (loc (elf64-sym) (elf64-r-sym (@ r-info rela)) syms-buf))
        (switch = (elf64-r-type (@ r-info rela))
          ((r-x86-64-none) (undefined))
          ((r-x86-64-64) [memcpy (@ r-offset rela) (storage _[+(@ st-value sym)addend]) #8])
          ((r-x86-64-pc32) [memcpy (@ r-offset rela) (storage _[-[+(@ st-value sym)addend](@ r-offset rela)]) #4])
          ((r-x86-64-glob-dat) [memcpy (@ r-offset rela) (storage _(@ st-value sym)) #8])
          ((r-x86-64-jump-slot) [memcpy (@ r-offset rela) (storage _(@ st-value sym)) #8])
          ((r-x86-64-32) [memcpy (@ r-offset rela) (storage _[+(@ st-value sym) addend]) #4])
          ((r-x86-64-32s) [memcpy (@ r-offset rela) (storage _[+(@ st-value sym) addend]) #4])
          ((r-x86-64-16) [memcpy (@ r-offset rela) (storage _[+(@ st-value sym) addend]) #2])
          ((r-x86-64-pc16) [memcpy (@ r-offset rela) (storage _[-[+(@ st-value sym)addend](@ r-offset rela)])#2])
          ((r-x86-64-8) [memcpy (@ r-offset rela) (storage _[+(@ st-value sym)addend]) #1])
          ((r-x86-64-pc8) [memcpy (@ r-offset rela) (storage _[-[+(@ st-value sym)addend](@ r-offset rela)])#1])
          ((r-x86-64-size32) [memcpy (@ r-offset rela) (storage _[+(@ st-size sym)addend]) #4])
          ((r-x86-64-size64) [memcpy (@ r-offset rela) (storage _[+(@ st-size sym)addend]) #8])
          {handler (storage _ object-error)})))))))))
      (undefined)))))

(;; Stores the relocation addends somewhere out of the way because it may be the
  case that that the contents of the addend field may be overwritten by a
  relocation, which is a problem because the future relocations may depend on
  the value of the addend.)

(constrain store-addends (\(r) (with-vars (a) (`(function (obj buffer ,a) ())r)r)))

(function store-addends (obj reg handler)
  (until (sec-idx #0) [= sec-idx (@ e-shnum(@ obj-ehdr obj))] [+ sec-idx #1]
    (let (shdr-buf (loc (elf64-shdr) sec-idx (@ obj-shdrs obj)))
    (if [= (@ sh-type shdr-buf) (sht-rela)]
      (let (relanum [/ (@ sh-size shdr-buf) (@ sh-entsize shdr-buf)])
      (let (relas-buf ($(loc (unit) sec-idx (@ obj-relas obj))))
      (let (addends-buf (loc (unit) sec-idx (@ obj-addends obj))) (do
      [set addends-buf [buffer-alloc [* relanum (elf64-sxword)] reg handler]]
      (until (rela-idx #0) [= rela-idx relanum] [+ rela-idx #1]
        (let (rela (loc (elf64-rela) rela-idx relas-buf))
          [set8b (loc (elf64-sxword) rela-idx $addends-buf) (@ r-addend rela)]))))))
          
    (if [= (@ sh-type shdr-buf) (sht-rel)]
      (let (relanum [/ (@ sh-size shdr-buf) (@ sh-entsize shdr-buf)])
      (let (relas-buf ($(loc (unit) sec-idx (@ obj-relas obj))))
      (let (addends-buf (loc (unit) sec-idx (@ obj-addends obj))) (do
      [set addends-buf [buffer-alloc [* relanum (elf64-sxword)] reg handler]]
      (until (rela-idx #0) [= rela-idx relanum] [+ rela-idx #1]
        (let (rela (loc (elf64-rela) rela-idx relas-buf))
          [(switch = (elf64-r-type (@ r-info rela))
              ((r-x86-64-8) set1b) ((r-x86-64-pc8) set1b) ((r-x86-64-16) set2b) ((r-x86-64-pc16) set2b)
              ((r-x86-64-pc32) set4b) ((r-x86-64-32) set4b) ((r-x86-64-32s) set4b) ((r-x86-64-size32) set4b)
              ((r-x86-64-64) set8b) ((r-x86-64-size64) set8b) ((r-x86-64-glob-dat) set8b)
              ((r-x86-64-jump-slot) set8b) {handler (storage _ object-error)})
            (loc (elf64-sxword) rela-idx $addends-buf) (@ r-offset rela)]))))))
            
    (undefined))))))

(;; The offsets specified in the object file need to be turned into addresses for
  the code to execute correctly.)

(constrain offsets-to-addresses (\(r) (`(function (obj) ())r)))

(function offsets-to-addresses (obj)
  (until (sec-idx #0) [= sec-idx (@ e-shnum(@ obj-ehdr obj))] [+ sec-idx #1]
    (let (shdr-buf (loc (elf64-shdr) sec-idx (@ obj-shdrs obj)))
    (if (or [= (@ sh-type shdr-buf) (sht-rela)] [= (@ sh-type shdr-buf) (sht-rel)])
      (let (relanum [/ (@ sh-size shdr-buf) (@ sh-entsize shdr-buf)])
      (let (relas-buf ($(loc (unit) sec-idx (@ obj-relas obj))))
      (until (rela-idx #0) [= rela-idx relanum] [+ rela-idx #1]
        (let (rela (loc (elf64-rela) rela-idx relas-buf))
        (let (target-seg-addr ($(loc (unit) (@ sh-info shdr-buf) (@ obj-segs obj))))
        (setf r-offset rela [+ target-seg-addr (@ r-offset rela)]))))))
        
    (if [= (@ sh-type shdr-buf) (sht-symtab)]
      (let (symnum [/ (@ sh-size shdr-buf) (@ sh-entsize shdr-buf)])
      (let (syms-buf ($(loc (unit) sec-idx (@ obj-syms obj))))
      (until (sym-idx #0) [= sym-idx symnum] [+ sym-idx #1]
        (let (sym (loc (elf64-sym) sym-idx syms-buf))
        (setf st-value sym (switch = (@ st-shndx sym)
          ((shn-abs) (@ st-value sym))
          ((shn-common) #0)
          ((shn-undef) #0)
          (let (base-seg-addr ($(loc (unit) (@ st-shndx sym) (@ obj-segs obj))))
            [+ base-seg-addr (@ st-value sym)])))))))
            
    (undefined))))))

(;; Reformats the raw object code into a format more amenable for extraction of
  information and updating. Constructs an object containing everything of interest
  in the object code in the buffer reg and returns it.)

(constrain read-object (\(r) (with-vars (c d e) (`(function (,c ,d buffer ,e) obj)r)r)))

(function read-object (objsrc objsrc-sz reg handler)
  (let (obj [buffer-alloc (object) reg handler]) (do
  (if [< objsrc-sz (elf64-ehdr)] {handler (storage _ object-error)} (undefined))
  (setf obj-ehdr obj [buffer-alloc (elf64-ehdr) reg handler])
  [memcpy (@ obj-ehdr obj) objsrc (elf64-ehdr)]
  (setf obj-shdrs obj [buffer-alloc [* (@ e-shnum(@ obj-ehdr obj)) (elf64-shdr)] reg handler])
  (setf obj-syms obj [buffer-alloc [* (@ e-shnum(@ obj-ehdr obj)) (unit)] reg handler])
  (setf obj-relas obj [buffer-alloc [* (@ e-shnum(@ obj-ehdr obj)) (unit)] reg handler])
  (setf obj-addends obj [buffer-alloc [* (@ e-shnum(@ obj-ehdr obj)) (unit)] reg handler])
  (setf obj-segs obj [buffer-alloc [* (@ e-shnum(@ obj-ehdr obj)) (unit)] reg handler])
  
  (until (sec-idx #0) [= sec-idx (@ e-shnum(@ obj-ehdr obj))] [+ sec-idx #1]
    (let (shdr-buf (loc (elf64-shdr) sec-idx (@ obj-shdrs obj)))
    (let (seg-buf (loc (unit) sec-idx (@ obj-segs obj))) (do
    [memcpy shdr-buf [+ objsrc (loc (@ e-shentsize(@ obj-ehdr obj)) sec-idx (@ e-shoff(@ obj-ehdr obj)))] (elf64-shdr)]
    [set seg-buf [buffer-alloc (@ sh-size shdr-buf) reg handler]]
    
    (if [= (@ sh-type shdr-buf) (sht-nobits)] (undefined)
      [memcpy $seg-buf [+ objsrc (@ sh-offset shdr-buf)] (@ sh-size shdr-buf)])
      
    (if [= (@ sh-type shdr-buf) (sht-symtab)]
      (let (symnum [/ (@ sh-size shdr-buf) (@ sh-entsize shdr-buf)])
      (let (syms-buf (loc (unit) sec-idx (@ obj-syms obj))) (do
      (;; Following code copies recognized information from the symbol table into (@ obj-syms obj))
      [set syms-buf [buffer-alloc [* symnum (elf64-sym)] reg handler]]
      (until (sym-idx #0) [= sym-idx symnum] [+ sym-idx #1]
        [memcpy (loc (elf64-sym) sym-idx $syms-buf) (loc (@ sh-entsize shdr-buf) sym-idx $seg-buf)
          (elf64-sym)]))))
          
    (if (or [= (@ sh-type shdr-buf) (sht-rela)] [= (@ sh-type shdr-buf) (sht-rel)])
      (let (relanum [/ (@ sh-size shdr-buf) (@ sh-entsize shdr-buf)])
      (let (relas-buf (loc (unit) sec-idx (@ obj-relas obj))) (do
      (;; Following code copies recognized information from the relocations into (@ obj-relas obj))
      [set relas-buf [buffer-alloc [* relanum (elf64-rela)] reg handler]]
      (until (rela-idx #0) [= rela-idx relanum] [+ rela-idx #1]
        [memcpy (loc (elf64-rela) rela-idx $relas-buf) (loc (@ sh-entsize shdr-buf) rela-idx $seg-buf)
          (if [= (@ sh-type shdr-buf) (sht-rela)] (elf64-rela) (elf64-rel))]))))
          
    (undefined)))))))
  
  obj)))

(storage object-error (undefined))

(;; Constructs a handle to the specified object code. objsrc is a reference to
  the buffer containing the object code. objsrc-sz is the size of the buffer.
  reg is the buffer in which our handle will be constructed. Return value is
  a handle to the object.)

(constrain load (\(r) (with-vars (c d e) (`(function (,c ,d buffer ,e) obj)r)r)))

(function load (objsrc objsrc-sz reg handler)
  (let (obj [read-object objsrc objsrc-sz reg handler]) (do
    [offsets-to-addresses obj]
    [store-addends obj reg handler]
    [do-relocations obj handler]
    obj)))

(constrain name-of (\(r) (`(function (obj elf64-shdr elf64-sym) string)r)))

(function name-of (obj shdr sym)
  (let (seg-buf ($(loc (unit) (@ sh-link shdr) (@ obj-segs obj))))
    [+ seg-buf (@ st-name sym)]))

(;; Makes a binding with the given name and address. name is a string containg
  the name of the binding. address is the address of the binding. reg is the
  buffer in which the binding should be constructed. Return value is the
  constructed binding.)

(constrain make-binding (\(r) (with-vars (a b) (`(function (string ,a buffer ,b) bndg-aug)r)r)))

(function make-binding (name address reg handler)
  (let (sym [buffer-alloc (binding) reg handler]) (do
    (setf bndg-name sym name)
    (setf bndg-offset sym address)
    sym)))

(;; Updates the bindings in the given object. obj is the object whose bindings
  need updating. updates is a list of bindings representing the updates that
  need to be applied to obj.)

(constrain mutate-bindings (\(r) (`(function (obj (list bndg-aug)) ())r)))

(function mutate-bindings (obj updates) (do
  (foreach (update updates)
    (until (sec-idx #0) [= sec-idx (@ e-shnum(@ obj-ehdr obj))] [+ sec-idx #1]
      (let (shdr-buf (loc (elf64-shdr) sec-idx (@ obj-shdrs obj)))
      (if [= (@ sh-type shdr-buf) (sht-symtab)]
        (let (symnum [/ (@ sh-size shdr-buf) (@ sh-entsize shdr-buf)])
        (let (syms-buf ($(loc (unit) sec-idx (@ obj-syms obj))))
        (until (sym-idx #1) [= sym-idx symnum] [+ sym-idx #1]
          (let (sym (loc (elf64-sym) sym-idx syms-buf))
          (if (and (not [strcmp [name-of obj shdr-buf sym] (@ bndg-name update)])
              (or [= (@ st-shndx sym) (shn-undef)] [= (@ st-shndx sym) (shn-common)])
              (or [= (elf64-st-bind (@ st-info sym)) (stb-global)]
                [= (elf64-st-bind (@ st-info sym)) (stb-weak)]))
            (setf st-value sym (@ bndg-offset update))
            (undefined))))))
        (undefined)))))
  (;; If obj was created using load, the following invocation cannot produce an error; hence the unspecified handler arguments.)
  [do-relocations obj (undefined)]))

(;; Returns the bindings in the given object.)

(constrain bindings (\(r) (with-vars (a b) (`(function (,a obj buffer ,b) (list bndg-aug))r)r)))

(function bindings (flag obj reg handler)
  (let (syms (storage _ nil)) (do
  (until (sec-idx #0) [= sec-idx (@ e-shnum(@ obj-ehdr obj))] [+ sec-idx #1]
    (let (shdr-buf (loc (elf64-shdr) sec-idx (@ obj-shdrs obj)))
    (if [= (@ sh-type shdr-buf) (sht-symtab)]
      (let (symnum [/ (@ sh-size shdr-buf) (@ sh-entsize shdr-buf)])
      (let (syms-buf ($(loc (unit) sec-idx (@ obj-syms obj))))
      (until (sym-idx #1) [= sym-idx symnum] [+ sym-idx #1]
        (let (sym (loc (elf64-sym) sym-idx syms-buf))
        (if (and [= (not(not(or [= (@ st-shndx sym) (shn-undef)] [= (@ st-shndx sym) (shn-common)]))) flag]
            (or [= (elf64-st-bind (@ st-info sym)) (stb-global)]
              [= (elf64-st-bind (@ st-info sym)) (stb-weak)]))
          [prepend [make-binding [name-of obj shdr-buf sym] (@ st-value sym) reg handler] syms
            reg handler]
          (undefined))))))
    (undefined))))
  $syms)))

(;; Returns a list of the mutable bindings in the given object. obj is the object
  whose mutable bindings are being queried. reg is the buffer in which the list
  of mutable bindings will be constructed. Return value is the list of mutable
  bindings.)

(constrain mutable-bindings (\(r) (with-vars (b) (`(function (obj buffer ,b) (list bndg-aug))r)r)))

(function mutable-bindings (obj reg handler) [bindings #1 obj reg handler])

(;; Analogous to above.)

(constrain immutable-bindings (\(r) (with-vars (b) (`(function (obj buffer ,b) (list bndg-aug))r)r)))

(function immutable-bindings (obj reg handler) [bindings #0 obj reg handler])

(;; Returns the address of the segment of the given object that has a particular
  name. obj is the object whose segment addresses is being queried. name is
  the name of the segment that is to be found.)

(constrain segment (\(r) (with-vars (a) (`(function (obj string) ,a)r)r)))

(function segment (obj name) (with return
  (if [= (@ e-shstrndx(@ obj-ehdr obj)) (shn-undef)] (undefined)
    (let (shstrseg-buf ($(loc (unit) (@ e-shstrndx(@ obj-ehdr obj)) (@ obj-segs obj))))
    (until (sec-idx #0) [= sec-idx (@ e-shnum(@ obj-ehdr obj))] [+ sec-idx #1]
      (let (shdr-buf (loc (elf64-shdr) sec-idx (@ obj-shdrs obj)))
      (if [strcmp (loc #1 (@ sh-name shdr-buf) shstrseg-buf) name] (undefined)
        {return ($(loc (unit) sec-idx (@ obj-segs obj)))})))))))

