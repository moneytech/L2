(;; Convenience functions for accessing elements of program internal lists.
	Note that the @fst and @rst functions are list accessor functions only for
	the fragments supplied to macros.)

(function @car (l) (@ car l))

(function @cdr (l) (@ cdr l))

(function @cddr (l) [@cdr [@cdr l]])

(function @cdddr (l) [@cdr [@cddr l]])

(function @cddddr (l) [@cdr [@cdddr l]])

(function @cdddddr (l) [@cdr [@cddddr l]])

(function @cddddddr (l) [@cdr [@cdddddr l]])

(function @cadr (l) [@car [@cdr l]])

(function @caddr (l) [@car [@cddr l]])

(function @cadddr (l) [@car [@cdddr l]])

(function @caddddr (l) [@car [@cddddr l]])

(function @cadddddr (l) [@car [@cdddddr l]])

(storage nil (begin) nil)

(function nil? (l) [= [@cdr l] l])

(;; Appends an item to the given list. data is the data that is to be appended.
	l is a reference to the list that is to be appended to. r is the buffer into
	which the extension is being placed.)

(function append (data l r handler err) (with return
	{(continuation loop (l)
		(if (not [nil? $l])
			{loop (& cdr $l)}
			(begin
				[set l [buffer-alloc (list-struct) r handler err]]
				(setf car $l data)
				(setf cdr $l nil)
				{return (& car $l)}))) l}))

(;; Makes a new list with the given head and tail. data is what is going to be
	put at the head. rest is the list that will be the tail of the new list. r
	is the buffer into which the extension is being placed. Return value is the
	new list.)

(function cons (data rest r handler err) (with return
	(let (l [buffer-alloc (list-struct) r handler err]) (begin
		(setf car l data)
		(setf cdr l rest)
		{return l}))))

(;; Appends the second list onto the first list. fst-ref is a reference to the
	list that will be appended to. snd is the list that will be appended.)

(function append-list (fst-ref snd) (with return
	{(continuation loop (fst-ref)
		(if [nil? $fst-ref]
			{return [set fst-ref snd]}
			{loop (& cdr $fst-ref)})) fst-ref}))

(;; Analogous to append above.)

(function prepend (data l-ref r handler err)
	(let (ret [buffer-alloc (list-struct) r handler err]) (begin
		(setf car ret data)
		(setf cdr ret $l-ref)
		[set l-ref ret])))

(;; Computes the length of the given list. l is the list whose length will be
	computed.)

(function length (l) (with return
	{(continuation loop (l size)
		(if [nil? l]
			{return size}
			{loop [@cdr l] [+ #1 size]})) l #0}))

(;; Constructs a reverse of the given list. l is the list that is to be reversed.
	r is the buffer into which the reversed list should be placed. Return value
	is the reversed list.)

(function reverse (l r handler err) (reverse-map (x l) x r handler err))

