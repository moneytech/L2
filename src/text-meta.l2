(ignore The following function maps character s-expressions to ASCII codes.)

(function meta:char-aux (l) (switch char= l
  (-!- #33) (-"- #34) (-#- #35) (-$- #36) (-%- #37) (-&- #38) (-'- #39) (-*- #42)
  (-+- #43) (-,- #44) (--- #45) (-.- #46) (-/- #47) (-0- #48) (-1- #49) (-2- #50)
  (-3- #51) (-4- #52) (-5- #53) (-6- #54) (-7- #55) (-8- #56) (-9- #57) (-:- #58)
  (-;- #59) (-<- #60) (-=- #61) (->- #62) (-?- #63) (-@- #64) (-A- #65) (-B- #66)
  (-C- #67) (-D- #68) (-E- #69) (-F- #70) (-G- #71) (-H- #72) (-I- #73) (-J- #74)
  (-K- #75) (-L- #76) (-M- #77) (-N- #78) (-O- #79) (-P- #80) (-Q- #81) (-R- #82)
  (-S- #83) (-T- #84) (-U- #85) (-V- #86) (-W- #87) (-X- #88) (-Y- #89) (-Z- #90)
  (-\- #92) (-^- #94) (-_- #95) (-`- #96) (-a- #97) (-b- #98) (-c- #99) (-d- #100)
  (-e- #101) (-f- #102) (-g- #103) (-h- #104) (-i- #105) (-j- #106) (-k- #107) (-l- #108)
  (-m- #109) (-n- #110) (-o- #111) (-p- #112) (-q- #113) (-r- #114) (-s- #115) (-t- #116)
  (-u- #117) (-v- #118) (-w- #119) (-x- #120) (-y- #121) (-z- #122) (-|- #124) (-~- #126)
  #0))

(ignore
  The following function maps character s-expressions to literals of ASCII codes. So
  for example, the L2 expression (char A) is equivalent to the C literal 'A'.)

(function char (l r) [=# [meta:char-aux [@ffst l]] r])

(ignore
  The following function measures the space that the text in the given s-expression would
  take in memory.)

(function meta:dquote-length (l r)
  (loop measure (str l) (len #0)
    (if [emt? str]
      len
    (if (and [emt? [@fst str]] [emt? [@rst str]])
      {measure [@rst str] [+ len #1]}
    (if (and [emt? [@fst str]] [token? [@frst str]])
      {measure [@rst str] [+ len #1]}
    (if [emt? [@fst str]]
      {measure [@rst str] len}
    (if [token? [@fst str]]
      {measure [lst [@rfst str] [@rst str] r] [+ len #1]}
      {measure [@rst str] [+ len #1]})))))))

(ignore
  The following function turns text in the form of a list of tokens into code that
  allocates a buffer on the stack and puts the equivalent C-string into it. So for
  example, the L2 expression (" Hello world.) is the same as the C literal "Hello world."
  except that it is allocated on the stack.)

(function " (l r)
  (let (buf (storage _ (ignore)))
    (loop add-word (str l) (index #0) (exprs emt) (instrs emt)
      (let (sub-index [rem index (unit)])
        (if [emt? str]
          (`(let (dquote:str (,[llst (` storage r) (` dquote:tmp r) [meta:reverse exprs r] r]))
              (,[lst (` do r) [meta:reverse [lst (`(constrain dquote:str (\ k (` string k)))r) instrs r]r]r]))r)
        
        (if (and [emt? [@fst str]] [emt? [@rst str]]) (do
          [setb [+ buf sub-index] (nul)]
          {add-word [@rst str] [+ index #1] [lst [=# $buf r] exprs r] instrs})
            
        (if (and [emt? [@fst str]] [token? [@frst str]]) (do
          [setb [+ buf sub-index] (space)]
          {add-word [@rst str] [+ index #1] (if [= sub-index #7] [lst [=# $buf r] exprs r] exprs) instrs})
        
        (if [emt? [@fst str]] {add-word [@rst str] index exprs instrs}
        
        (if [token? [@fst str]] (do
          [setb [+ buf sub-index] [meta:char-aux [@ffst str]]]
          {add-word [lst [@rfst str] [@rst str] r] [+ index #1] (if [= sub-index #7] [lst [=# $buf r] exprs r] exprs) instrs})
          
          {add-word [@rst str] [+ index #1] (if [= sub-index #7] [lst [=# $buf r] exprs r] exprs)
            [lst (`[setb [+ dquote:str (,[=# index r])] (,[@fst str])]r) instrs r]})))))))))

(ignore
  The following functions implement ASCII control characters. These can be embedded into
  uses of the quote function above. So for example, the L2 expression (" Hello(lf)Bye) is
  equivalent to the C literal "Hello\nBye".)

(function nul (l r) [=# #0 r])

(function bel (l r) [=# #7 r])

(function bs (l r) [=# #8 r])

(function ht (l r) [=# #9 r])

(function lf (l r) [=# #10 r])

(function cr (l r) [=# #13 r])

(function vt (l r) [=# #11 r])

(function ff (l r) [=# #12 r])

(function lparen (l r) [=# #40 r])

(function rparen (l r) [=# #41 r])

(function lbrace (l r) [=# #123 r])

(function rbrace (l r) [=# #125 r])

(function lbracket (l r) [=# #91 r])

(function rbracket (l r) [=# #93 r])

(function space (l r) [=# #32 r])

