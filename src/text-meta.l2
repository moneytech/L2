(;; The following function turns a character s-expression into its equivalent
	ASCII code. So for example, the L2 expression (char A) is equivalent to the
	C literal 'A'.)

(function char (l r)
	(switch char= [@ffst $l]
		(-!- (` #33 $r)) (-"- (` #34 $r)) (-#- (` #35 $r)) (-$- (` #36 $r)) (-%- (` #37 $r)) (-&- (` #38 $r)) (-'- (` #39 $r))
		(-*- (` #42 $r)) (-+- (` #43 $r)) (-,- (` #44 $r)) (--- (` #45 $r)) (-.- (` #46 $r)) (-/- (` #47 $r)) (-0- (` #48 $r))
		(-1- (` #49 $r)) (-2- (` #50 $r)) (-3- (` #51 $r)) (-4- (` #52 $r)) (-5- (` #53 $r)) (-6- (` #54 $r)) (-7- (` #55 $r))
		(-8- (` #56 $r)) (-9- (` #57 $r)) (-:- (` #58 $r)) (-;- (` #59 $r)) (-<- (` #60 $r)) (-=- (` #61 $r)) (->- (` #62 $r))
		(-?- (` #63 $r)) (-@- (` #64 $r)) (-A- (` #65 $r)) (-B- (` #66 $r)) (-C- (` #67 $r)) (-D- (` #68 $r)) (-E- (` #69 $r))
		(-F- (` #70 $r)) (-G- (` #71 $r)) (-H- (` #72 $r)) (-I- (` #73 $r)) (-J- (` #74 $r)) (-K- (` #75 $r)) (-L- (` #76 $r))
		(-M- (` #77 $r)) (-N- (` #78 $r)) (-O- (` #79 $r)) (-P- (` #80 $r)) (-Q- (` #81 $r)) (-R- (` #82 $r)) (-S- (` #83 $r))
		(-T- (` #84 $r)) (-U- (` #85 $r)) (-V- (` #86 $r)) (-W- (` #87 $r)) (-X- (` #88 $r)) (-Y- (` #89 $r)) (-Z- (` #90 $r))
		(-\- (` #92 $r)) (-^- (` #94 $r)) (-_- (` #95 $r)) (-`- (` #96 $r)) (-a- (` #97 $r)) (-b- (` #98 $r)) (-c- (` #99 $r))
		(-d- (` #100 $r)) (-e- (` #101 $r)) (-f- (` #102 $r)) (-g- (` #103 $r)) (-h- (` #104 $r)) (-i- (` #105 $r)) (-j- (` #106 $r))
		(-k- (` #107 $r)) (-l- (` #108 $r)) (-m- (` #109 $r)) (-n- (` #110 $r)) (-o- (` #111 $r)) (-p- (` #112 $r)) (-q- (` #113 $r))
		(-r- (` #114 $r)) (-s- (` #115 $r)) (-t- (` #116 $r)) (-u- (` #117 $r)) (-v- (` #118 $r)) (-w- (` #119 $r)) (-x- (` #120 $r))
		(-y- (` #121 $r)) (-z- (` #122 $r)) (-|- (` #124 $r)) (-~- (` #126 $r)) (` #0 $r)))

(;; The following function turns text in the form of a list of s-expressions
	into code that allocates a buffer on the stack and puts the equivalent
	C-string into it. So for example, the L2 expression (" Hello world.) is
	the same as the C literal "Hello world." except that it is allocated on the
	stack.)

(function " (l r) (with return
	{(continuation add-word (str index instrs)
		(if [emt? $str]
			{return (`(with dquote:return
				(,[llst (` begin $r) [llst (` storage $r) (` dquote:str $r)
						(with return {(continuation _ (phs num)
							(if $num
								{_ [lst (` #0 $r) $phs $r] [- $num #1]}
								{return $phs})) emt [+[/ $index (unit)]#1]}) $r]
					[meta:reverse [lst (`{dquote:return dquote:str}$r) $instrs $r]$r]$r]))$r)}
		
		(if (and [emt? [@fst $str]] [emt? [@rst $str]])
			{add-word [@rst $str] [+ $index #1]
				[lst (`[setb [+ dquote:str (,[value->literal $index $r])] #0]$r) $instrs $r]}
				
		(if (and [emt? [@fst $str]] [symbol? [@frst $str]])
			{add-word [@rst $str] [+ $index #1]
				[lst (`[setb [+ dquote:str (,[value->literal $index $r])] #32]$r) $instrs $r]}
		
		(if [emt? [@fst $str]] {add-word [@rst $str] $index $instrs}
				
		(if [symbol? [@fst $str]]
			{add-word [lst [@rfst $str] [@rst $str] $r] [+ $index #1]
				[lst (`[setb [+ dquote:str (,[value->literal $index $r])]
					(,[char [lst [lst [@ffst $str] emt $r] emt $r]$r emt])]$r) $instrs $r]}
			
			{add-word [@rst $str] [+ $index #1]
				[lst (`[setb [+ dquote:str (,[value->literal $index $r])] (,[@fst $str])]$r) $instrs $r]})))))) $l #0 emt}))

(;; The following functions implement ASCII control characters. These can be
	embedded into uses of the quote function above. So for example, the L2
	expression (" Hello(lf)Bye) is equivalent to the C literal "Hello\nBye".)

(function nul (l r) [mk# $r #0])

(function bel (l r) [mk# $r #7])

(function bs (l r) [mk# $r #8])

(function ht (l r) [mk# $r #9])

(function lf (l r) [mk# $r #10])

(function cr (l r) [mk# $r #13])

(function vt (l r) [mk# $r #11])

(function ff (l r) [mk# $r #12])

(function lparen (l r) [mk# $r #40])

(function rparen (l r) [mk# $r #41])

(function lbrace (l r) [mk# $r #123])

(function rbrace (l r) [mk# $r #125])

(function lbracket (l r) [mk# $r #91])

(function rbracket (l r) [mk# $r #93])

(function space (l r) [mk# $r #32])
