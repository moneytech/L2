(;; Takes two lists of the same length and produces a list of pairs of which the
	first element comes from the first list and the second element comes from the
	second list. a is the list from which the first elements of the zip will
	come from. b is the list from which the second elements of the zip will come
	from.)

(function meta:zip (a b r) (with return
	{(continuation aux (output a b)
		(if (not [emt? a])
			{aux [lst [llst [@fst a] [@fst b] emt r] output r] [@rst a] [@rst b]}
			{return [meta:reverse output r]})) emt a b}))

(;; A zipped foreach macro. The syntax is as follows:
	(foreach (v1 l1) (v2 l2) ... (vN lN) expr) where l1, l2, ..., lN must have the same size.)

(function foreach (s r)
	(let (bindings [meta:reverse [@rst [meta:reverse s r]] r]) (body [@fst [meta:reverse s r]])
			(labels (with return {(continuation aux (index-refs ref input-pairs)
				(if (not [emt? input-pairs])
					{aux [lst ref index-refs r]
						[meta:reverse [lst -1- [meta:reverse ref r]r]r]
						[@rst input-pairs]}
					{return [meta:reverse index-refs r]})) emt (` foreach:v r) [@rst [meta:reverse s r]]}))
		[llst (` jump r)
			[llllst (` continuation r) (` foreach:loop r) labels
				(`(if (not [nil? foreach:v])
					(,[lllst (` begin r)
						[lst (` let r) [meta:reverse [lst body [meta:map [meta:zip [meta:map bindings (begin) @fst r] labels r]
								r (function make-binding (a r) (`((,[@fst a]) [@car (,[@frst a])])r))r]r]r]r]
						[llst (` jump r) (` foreach:loop r) [meta:map labels r (function make-update (a r) (`[@cdr ,a]r))r] r] emt r])
					(`{foreach:return (begin)}r))r) emt r] [meta:map bindings (begin) @frst r]r]))

(;; Like a C-array initializer, but for lists. Does the following transformation:
	(list (expr1 expr2 ... exprN) r handler err)
	->
	[cons expr1 [cons expr2 [... [cons exprN nil r handler err] ...] r handler err] r handler err])

(function list (l r)
	(with return {(continuation loop (out in)
			(if [emt? in]
				{return out}
				{loop [llllst (` invoke r) (` cons r) [@fst in] out [@rst l] r] [@rst in]}))
		(` nil r) [meta:reverse [@fst l] r]}))

(function list-struct (l r) [mk# r #16])

(function car (l r) [mk-field l r #0 #8])

(function cdr (l r) [mk-field l r #8 #8])
