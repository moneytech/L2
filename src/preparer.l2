(function defined-str= (a b) (and $a $b [str= $a $b]))

(function named-ref= (a b) [defined-str= (@ expr-name $a) (@ expr-name $b)])

(storage multiple-definition-error #0)

(function vfind-multiple-definitions (e ctx) (with return (begin
	(storage handler (@0 $ctx))
	(storage err (@1 $ctx))
	
	(switch = (@ expr-type $e)
		((-begin-) (let (temp-reg [create-buffer #0]) (begin
			(let (definitions [filter (function _ (f) (or [= (@ expr-type $f) (-storage-)] [= (@ expr-type $f) (-function-)]))
					(@ expr-expressions $e) $temp-reg])
				(until (partial $definitions) [nil? $partial] [@cdr $partial]
					(if [find (function _ (f ctx) [named-ref= (@ expr-reference $f) (@ expr-reference $ctx)])
							(& cdr $partial) [@car $partial]]
						{$handler (set-storage $err multiple-definition-error (@ expr-name(@ expr-reference[@car $partial])))}
						(begin))))
			[destroy-buffer $temp-reg]
			{return $e})))
		
		((-continuation-) (-function-) (let (temp-reg [create-buffer #0]) (begin
			(let (ref-with-params [cons (@ expr-reference $e) (@ expr-parameters $e) $temp-reg])
				(until (partial $ref-with-params) [nil? $partial] [@cdr $partial]
					(if [find (function _ (f ctx) [named-ref= $f $ctx]) (& cdr $partial) [@car $partial]]
						{$handler (set-storage $err multiple-definition-error (@ expr-name[@car $partial]))}
						(begin))))
			[destroy-buffer $temp-reg]
			{return $e})))
		
		{return $e}))))

(function get-parent-function (n) (with return
	{(continuation loop (n)
		(if [= (@ expr-type $n) (-function-)]
			{return $n}
			{loop (@ expr-parent $n)})) (@ expr-parent $n)}))

(function symbol-of (reference) (with return (begin
	(let (same-func (true))
		(until (t $reference) [= $t (null)] (@ expr-parent $t)
			(switch = (@ expr-type $t)
				((-begin-) (foreach (u (@ expr-expressions $t))
					(if (and (or [= (@ expr-type $u) (-function-)] (and [= (@ expr-type $u) (-storage-)] (or $same-func
							[= (@ sym-type(@ expr-symbol(@ expr-reference $u))) (static-storage)])))
							[named-ref= (@ expr-reference $u) $reference])
						{return (@ expr-symbol(@ expr-reference $u))}
						(begin))))
				
				((-function-) (begin
					(if [named-ref= (@ expr-reference $t) $reference]
						{return (@ expr-symbol(@ expr-reference $t))}
						(foreach (u (@ expr-parameters $t))
							(if (and (or $same-func [= (@ sym-type(@ expr-symbol $u)) (static-storage)]) [named-ref= $u $reference])
								{return (@ expr-symbol $u)}
								(begin))))
					[set same-func (false)]))
				
				((-continuation-) (-with-) (-storage-)
					(if (and (or $same-func [= (@ sym-type(@ expr-symbol(@ expr-reference $t))) (static-storage)])
							[named-ref= (@ expr-reference $t) $reference])
						{return (@ expr-symbol(@ expr-reference $t))}
					(if [= (@ expr-type $t) (-storage-)] (begin)
						(foreach (u (@ expr-parameters $t))
							(if (and (or $same-func [= (@ sym-type(@ expr-symbol $u)) (static-storage)]) [named-ref= $u $reference])
								{return (@ expr-symbol $u)}
								(begin))))))
				
				(begin))))
	{return (null)})))

(function jump-reference? (s) (and [= (@ expr-type(@ expr-parent $s)) (-jump-)] [= (@ expr-reference(@ expr-parent $s)) $s]))

(function invoke-reference? (s) (and [= (@ expr-type(@ expr-parent $s)) (-invoke-)] [= (@ expr-reference(@ expr-parent $s)) $s]))

(function function-reference? (s) (and [= (@ expr-type(@ expr-parent $s)) (-function-)] [= (@ expr-reference(@ expr-parent $s)) $s]))

(function c-reference? (s)
	(and (or [= (@ expr-type(@ expr-parent $s)) (-continuation-)] [= (@ expr-type(@ expr-parent $s)) (-with-)])
		[= (@ expr-reference(@ expr-parent $s)) $s]))

(function get-target-expression (s) (@ expr-parent(@ sym-definition(@ expr-symbol $s))))

(function get-root-function (s) (with return
	{(continuation loop (s parent)
		(if $parent
			{loop $parent (@ expr-parent $parent)}
			{return $s})) $s (@ expr-parent $s)}))

(storage param-count-mismatch-error #0)

(function vlink-references (s ctx) (with return (begin
	(storage handler (@1 $ctx))
	(storage r (@0 $ctx))
	(storage err (@2 $ctx))
	
	(if [= (@ expr-type $s) (-reference-)]
		(begin
			(setf expr-symbol $s (if (@ expr-symbol $s) (@ expr-symbol $s) [symbol-of $s]))
			(if (not (@ expr-symbol $s))
				(let (ref [make-reference (@ expr-name $s) $r $handler $err]) (rf [get-root-function $s])
					(let (sym [make-symbol (static-storage) (global-scope) (undefined-state) (@ expr-name $s) $ref $r $handler $err])
						(begin
							(setf expr-symbol $ref $sym)
							(setf expr-parameters $rf [cons $ref (@ expr-parameters $rf) $r $handler $err])
							(setf expr-parent $ref $rf)
							(setf expr-symbol $s $sym)
							{return $s})))
			(if (and (or (and [jump-reference? $s] [c-reference? (@ sym-definition(@ expr-symbol $s))])
					(and [invoke-reference? $s] [function-reference? (@ sym-definition(@ expr-symbol $s))]))
					(not [= [length(@ expr-arguments(@ expr-parent $s))] [length(@ expr-parameters[get-target-expression $s])]]))
				{$handler (set-storage $err param-count-mismatch-error (@ expr-parent $s) [get-target-expression $s])}
				{return $s})))
	(if (and (or (and [= (@ expr-type $s) (-continuation-)] [jump-reference? $s])
			(and [= (@ expr-type $s) (-function-)] [invoke-reference? $s]))
			(not [= [length (@ expr-arguments(@ expr-parent $s))] [length (@ expr-parameters $s)]]))
		{$handler (set-storage $err param-count-mismatch-error (@ expr-parent $s) $s)}
		{return $s})))))

(function vescape-analysis-aux (ref target)
	(if [jump-reference? $ref]
		(setf expr-short-circuit (@ expr-parent $ref) $target)
		(setf expr-escapes $target (true))))

(function vescape-analysis (s ctx) (with return (begin
	(if (and [= (@ expr-type $s) (-reference-)] (not [= (@ sym-definition(@ expr-symbol $s)) $s])
			[c-reference? (@ sym-definition(@ expr-symbol $s))])
		[vescape-analysis-aux $s [get-target-expression $s]]
	(if [= (@ expr-type $s) (-continuation-)]
		[vescape-analysis-aux $s $s]
		(begin)))
	{return $s})))

(function visit-expressions (visitor s ctx) (begin
	(switch = (@ expr-type $$s)
		((-begin-)
			(until (partial (@ expr-expressions $$s)) [nil? $partial] [@cdr $partial]
				[visit-expressions $visitor (& car $partial) $ctx]))
		
		((-if-) (begin
			[visit-expressions $visitor (& expr-condition $$s) $ctx]
			[visit-expressions $visitor (& expr-consequent $$s) $ctx]
			[visit-expressions $visitor (& expr-alternate $$s) $ctx]))
		
		((-function-) (-continuation-) (-with-)
			[visit-expressions $visitor (& expr-expression $$s) $ctx])
		
		((-jump-) (-invoke-) (-storage-) (begin
			(if [= (@ expr-type $$s) (-storage-)] (begin) [visit-expressions $visitor (& expr-reference $$s) $ctx])
			(until (partial (@ expr-arguments $$s)) [nil? $partial] [@cdr $partial]
				[visit-expressions $visitor (& car $partial) $ctx])))
		
		(begin))
	(replace-expression $s [$visitor $$s $ctx])))

(function pre-visit-expressions (visitor s ctx) (begin
	(replace-expression $s [$visitor $$s $ctx])
	
	(switch = (@ expr-type $$s)
		((-begin-)
			(until (partial (@ expr-expressions $$s)) [nil? $partial] [@cdr $partial]
				[pre-visit-expressions $visitor (& car $partial) $ctx]))
		
		((-if-) (begin
			[pre-visit-expressions $visitor (& expr-condition $$s) $ctx]
			[pre-visit-expressions $visitor (& expr-consequent $$s) $ctx]
			[pre-visit-expressions $visitor (& expr-alternate $$s) $ctx]))
		
		((-function-) (-continuation-) (-with-)
			[pre-visit-expressions $visitor (& expr-expression $$s) $ctx])
		
		((-jump-) (-invoke-) (-storage-) (begin
			(if [= (@ expr-type $$s) (-storage-)] (begin) [pre-visit-expressions $visitor (& expr-reference $$s) $ctx])
			(until (partial (@ expr-arguments $$s)) [nil? $partial] [@cdr $partial]
				[pre-visit-expressions $visitor (& car $partial) $ctx])))
		
		(begin))))

(function use-return-symbol (n ret-sym r handler err) (with return
	(substitute (.. $r $handler $err) (switch = (@ expr-type $n)
		((-with-) (-continuation-) (begin
			(setf expr-return-symbol $n $ret-sym)
			(put expr-expression $n [use-return-symbol (@ expr-expression $n)
				[make-symbol (dynamic-storage) (local-scope) (defined-state) (null) (null) ..] ..])
			{return $n}))
		
		((-function-) (begin
			(setf expr-return-symbol $n $ret-sym)
			(setf expr-expression-return-symbol $n [make-symbol (dynamic-storage) (local-scope) (defined-state) (null) (null) ..])
			(put expr-expression $n [use-return-symbol (@ expr-expression $n) (@ expr-expression-return-symbol $n) ..])
			{return $n}))
		
		((-invoke-) (-jump-) (-storage-)
			(let (container nil) (begin
				(if [= (@ expr-type $n) (-storage-)] (begin)
					(let (ref-ret-sym [make-symbol (dynamic-storage) (local-scope) (defined-state) (null) (null) ..]) (begin
						[append [use-return-symbol (@ expr-reference $n) $ref-ret-sym ..] container ..]
						(put expr-reference $n [use-symbol $ref-ret-sym ..]))))
						
				(until (partial (@ expr-arguments $n)) [nil? $partial] [@cdr $partial]
					(let (arg-ret-sym [make-symbol (dynamic-storage) (local-scope) (defined-state) (null) (null) ..]) (begin
						[append [use-return-symbol [@car $partial] $arg-ret-sym ..] container ..]
						(replace-expression (& car $partial) [use-symbol $arg-ret-sym ..]))))
				
				(setf expr-return-symbol $n $ret-sym)
				[append $n container ..]
				{return [make-begin $container ..]})))
		
		((-if-) (let (container nil) (begin
			(put expr-consequent $n [use-return-symbol (@ expr-consequent $n) $ret-sym ..])
			(put expr-alternate $n [use-return-symbol (@ expr-alternate $n) $ret-sym ..])
			(let (cond-ret-sym [make-symbol (dynamic-storage) (local-scope) (defined-state) (null) (null) ..]) (begin
				[append [use-return-symbol (@ expr-condition $n) $cond-ret-sym ..] container ..]
				(put expr-condition $n [use-symbol $cond-ret-sym ..])
				[append $n container ..]))
			{return [make-begin $container ..]})))
		
		((-begin-) (begin
			(until (partial (@ expr-expressions $n)) [nil? $partial] [@cdr $partial]
				(replace-expression (& car $partial) [use-return-symbol [@car $partial]
					[make-symbol (dynamic-storage) (local-scope) (defined-state) (null) (null) ..] ..]))
			{return $n}))
		
		((-reference-) (-literal-) (begin
			(setf expr-return-symbol $n $ret-sym)
			{return $n}))
		
		{return $n}))))

(function vlinearized-expressions (n ctx)
	(if [= (@ expr-type $n) (-begin-)]
		$n
		(with return
			(let (l (@0 $ctx)) (r (@1 $ctx)) (handler (@2 $ctx)) (err (@3 $ctx)) (begin
				[prepend $n $l $r $handler $err]
				{return $n})))))

(function classify-program-symbols (expr) (begin
	(if (@ expr-return-symbol $expr) (setf sym-type (@ expr-return-symbol $expr) (static-storage)) (begin))
	(switch = (@ expr-type $expr)
		((-begin-) (foreach (t (@ expr-expressions $expr)) [classify-program-symbols $t]))
		
		((-storage-) (-jump-) (-invoke-) (begin
			(if [= (@ expr-type $expr) (-storage-)]
				(setf sym-type (@ expr-symbol(@ expr-reference $expr)) (static-storage))
				[classify-program-symbols (@ expr-reference $expr)])
			(foreach (t (@ expr-arguments $expr)) [classify-program-symbols $t])))
		
		((-continuation-) (-with-) (begin
			(setf sym-type (@ expr-symbol(@ expr-reference $expr)) (static-storage))
			(foreach (t (@ expr-parameters $expr)) (setf sym-type (@ expr-symbol $t) (static-storage)))
			[classify-program-symbols (@ expr-expression $expr)]))
		
		((-if-) (begin
			[classify-program-symbols (@ expr-condition $expr)]
			[classify-program-symbols (@ expr-consequent $expr)]
			[classify-program-symbols (@ expr-alternate $expr)]))
		
		(begin))))

(storage undefined-reference-error)

(function vgenerate-metas (s ctx)
	(if [= (@ expr-type $s) (-meta-)]
		(with return (begin
			(storage handler (@2 $ctx))
			(storage err (@3 $ctx))
			(storage symbols (@0 $ctx))
			(storage expr-buf (@1 $ctx))
			
			(foreach (sym $symbols)
				(if [str= (@ sym-name $sym) (@ expr-name (@ expr-reference $s))]
					{return [vgenerate-metas [build-expression [(@ sym-offset $sym) (@ expr-argument $s) $expr-buf]
						$expr-buf $handler $err] $ctx]} (begin)))
			{$handler (set-storage $err undefined-reference-error (@ expr-name(@ expr-reference $s)))}))
		$s))

(function init-storage (data storage-expr symbols expr-buf obj-buf handler err cache)
	(if $$cache $$cache (with return (substitute (.. $expr-buf $handler $err) (begin
		(storage sets nil)
		(foreach (arg (@ expr-arguments $storage-expr)) (begin
			[pre-visit-expressions vgenerate-metas arg (storage _ $$symbols ..)]
			[append (make-invokeN [make-literal set ..] ([make-literal $data ..] $arg) ..) sets ..]
			[set data [+ $data (unit)]]))
		[set $cache [segment [load-program-and-mutate [make-program $sets ..] $$symbols $expr-buf $obj-buf $handler $err] (" .text)]]
		{return $$cache})))))

(function init-function (function-expr symbols expr-buf obj-buf handler err cache)
	(if $$cache $$cache (with return (substitute (.. $expr-buf $handler $err) (begin
		[pre-visit-expressions vgenerate-metas function-expr (storage _ $$symbols ..)]
		[load-program-and-mutate [make-program [cons $function-expr nil ..] ..] $$symbols $expr-buf $obj-buf $handler $err]
		[set $cache (@ sym-offset (@ expr-symbol (@ expr-reference $function-expr)))]
		{return $$cache})))))

(function init-expression (expr symbols expr-buf obj-buf handler err cache)
	(if $$cache $$cache (with return (substitute (.. $expr-buf $handler $err) (begin
		[pre-visit-expressions vgenerate-metas expr (storage _ $$symbols ..)]
		[set $cache [segment [load-program-and-mutate [make-program [cons $expr nil ..] ..] $$symbols $expr-buf $obj-buf
			$handler $err] (" .text)]]
		{return $$cache})))))

(function generate-metaprogram (program symbols expr-buf obj-buf handler err) (with return
	(substitute (.. $expr-buf $handler $err) (begin
		(storage c nil)
		(foreach (s (@ expr-expressions (@ expr-expression $program))) (begin
			(storage cache [buffer-alloc (unit) $obj-buf $handler $err])
			[set $cache (null)]
			(if [= (@ expr-type $s) (-storage-)] (begin
				(storage args nil)
				(foreach (_ (@ expr-arguments $s)) [prepend [make-begin nil ..] args ..])
				(storage storage-ref [make-reference (@ expr-name (@ expr-reference $s)) ..])
				[append [make-storage $storage-ref $args ..] c ..]
				(storage storage-ref-arg [make-reference (null) ..])
				[refer-reference $storage-ref-arg $storage-ref]
				[append (make-invokeN (make-invokeN [make-literal init-storage ..] ($storage-ref-arg [make-literal $s ..]
					[make-literal $symbols ..] [make-literal $expr-buf ..] [make-literal $obj-buf ..] [make-literal $handler ..]
					[make-literal $err ..] [make-literal $cache ..]) ..) () ..) c ..])
				
			(if [= (@ expr-type $s) (-function-)] (begin
				(storage params nil)
				(storage args nil)
				(foreach (_ (@ expr-parameters $s)) (begin
					[prepend [make-reference (null) ..] params ..]
					[prepend (make-invokeN [make-literal get ..] ([make-reference (null) ..]) ..) args ..]))
				[append [make-function [make-reference (@ expr-name (@ expr-reference $s)) ..] $params
					[make-invoke (make-invokeN [make-literal init-function ..] ([make-literal $s ..] [make-literal $symbols ..]
					[make-literal $expr-buf ..] [make-literal $obj-buf ..] [make-literal $handler ..] [make-literal $err ..]
					[make-literal $cache ..]) ..) $args ..] ..] c ..]
				(foreach (a $params) (t $args) [refer-reference [@car(@ expr-arguments $t)] $a]))
			
			(begin
				[append (make-invokeN (make-invokeN [make-literal init-expression ..] ([make-literal $s ..]
					[make-literal $symbols ..] [make-literal $expr-buf ..] [make-literal $obj-buf ..] [make-literal $handler ..]
					[make-literal $err ..] [make-literal $cache ..]) ..) () ..) c ..])))))
		{return [make-program $c ..]}))))
